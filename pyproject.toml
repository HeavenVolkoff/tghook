[tool.poetry]
name = "tghook"
readme = "README.md"
version = "0.0.8"
authors = ["VÃ­tor Vasconcellos <vasconcellos.dev@gmail.com>"]
license = "GPL-2.0-or-later"
packages = [{ include = "tghook/**/*.py" }, { include = "tghook/py.typed" }]
keywords = ["telegram", "bot", "library", "webhook", "tghook"]
repository = "https://github.com/HeavenVolkoff/tghook"
classifiers = [
  "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
  "Topic :: Communications :: Chat",
  "Topic :: Software Development :: Libraries",
  "Environment :: Console",
  "Environment :: Web Environment",
  "Operating System :: OS Independent",
  "Intended Audience :: Developers",
  "Development Status :: 3 - Alpha",
]
description = "A simple telegram bot that resolves video urls using yt-dlp"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/HeavenVolkoff/tghook/issues"

[tool.poetry.extras]
cmd = ["typed-argument-parser", "yt-dlp"]

[tool.poetry.scripts]
tghook = 'tghook.__main__:main'

[tool.poetry.dependencies]
python = "^3.9"
# Hard dependencies
orjson = "^3.6.4"
pydantic = "^1.8.2"
cryptography = "^35.0.0"
secure-context = "^2.0.0"
# Optional dependencies
yt-dlp = { version = "2021.*,!=2021.10.22", optional = true }
typed-argument-parser = { version = "^1.7.1", optional = true }

[tool.poetry.dev-dependencies]
mypy = "^0.910"
black = "^21.10b0"
isort = "^5.9.3"
poethepoet = "^0.10.0"
datamodel-code-generator = { extras = ["http"], version = "^0.11.14" }

[tool.poe.tasks]
check = { shell = "mypy .; npx pyright" }
format = { shell = "isort . && black -q . && npx prettier --write --loglevel=warn **/*.{md,json}" }
grab-tg-types = """datamodel-codegen
  --url https://ark0f.github.io/tg-bot-api/openapi.yml
  --output tghook/telegram/types.py
  --validation
  --reuse-model
  --strict-types str int bool float bytes
  --use-annotated
  --openapi-scopes schemas paths
  --strict-nullable
  --input-file-type openapi
  --snake-case-field
  --wrap-string-literal
  --use-schema-description
  --enum-field-as-literal one
  --target-python-version 3.9
  --enable-faux-immutability
  --use-generic-container-types"""
update-tg-types = ["grab-tg-types", "fix-tg-types", "format"]
update-editor-config = "curl -LO 'https://raw.githubusercontent.com/jokeyrhyme/standard-editorconfig/main/.editorconfig'"

[tool.poe.tasks.fix-tg-types]
shell = """sed -i 's/\\(\\\\\\)\\{0,1\\}\\\\_/_/g' tghook/telegram/types.py &&
  cat << EOF >&2
Currently some manual work is necessary:
- Remove all *PostResponse classes, as they are not used
- Remove all classes matching regex PostRequest[0-9]+
- Find all *PostRequest classes and export an Union type of them called RequestTypes
- Rename PostRequest sufix from class names
- Resolve mypy and pyright issues
- Check if all types definitions have they forward references updated

VSCode Tip for removing classes:
    - Use local search to find relevant class names
    - ALT + ENTER
    - CTRL + SHIFT + [
    - HOME
    - SHIFT + ARROW_DOWN
    - DEL
EOF"""

[tool.mypy]
pretty = true
strict = true
color_output = true
error_summary = true
ignore_errors = false
python_version = "3.9"
follow_imports = "normal"
strict_optional = true
show_error_codes = true
warn_unreachable = true
python_executable = "./.venv/bin/python"
show_error_context = true
show_column_numbers = true
warn_unused_configs = true
warn_unused_ignores = false              # for compatibility with pyright
warn_incomplete_stub = true
disallow_any_unimported = true

[tool.isort]
quiet = true
atomic = true
profile = "black"
src_paths = ["tghook", "tests"]
line_length = 99
length_sort = true
virtual_env = ".venv"
combine_star = true
order_by_type = true
dedup_headings = true
skip_gitignore = true
balanced_wrapping = true
combine_as_imports = true
import_heading_stdlib = "Internal"
remove_redundant_aliases = true
import_heading_thirdparty = "External"
import_heading_firstparty = "External"
import_heading_localfolder = "Project"

[tool.black]
color = true
line-length = 99
target-version = ['py38']

[tool.pyright]
venv = ".venv"
include = ["tghook", "tests"]
venvPath = "."
pythonVersion = "3.9"
pythonPlatform = "All"
typeCheckingMode = "strict"
reportImportCycles = "none"
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"
reportUnknownArgumentType = "none"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
