# generated by datamodel-codegen:
#   filename:  https://ark0f.github.io/tg-bot-api/openapi.yml
#   timestamp: 2022-03-05T07:54:26+00:00

from __future__ import annotations

# Internal
from enum import Enum
from typing import Any, Union, Optional, Sequence, Annotated

# External
from pydantic import Field, BaseModel, StrictInt, StrictStr, StrictBool, StrictFloat


class WebhookInfo(BaseModel):
    """
    Contains information about the current status of a webhook.
    """

    class Config:
        allow_mutation = False

    url: Annotated[
        StrictStr, Field(description="Webhook URL, may be empty if webhook is not set up")
    ]
    has_custom_certificate: Annotated[
        StrictBool,
        Field(
            description=(
                "*True*, if a custom certificate was provided for webhook certificate checks"
            )
        ),
    ]
    pending_update_count: Annotated[
        StrictInt, Field(description="Number of updates awaiting delivery")
    ]
    ip_address: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Currently used webhook IP address")
    ] = None
    last_error_date: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. Unix time for the most recent error that happened when trying to"
                " deliver an update via webhook"
            )
        ),
    ] = None
    last_error_message: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Error message in human-readable format for the most recent error that"
                " happened when trying to deliver an update via webhook"
            )
        ),
    ] = None
    max_connections: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. Maximum allowed number of simultaneous HTTPS connections to the"
                " webhook for update delivery"
            )
        ),
    ] = None
    allowed_updates: Annotated[
        Optional[Sequence[StrictStr]],
        Field(
            description=(
                "*Optional*. A list of update types the bot is subscribed to. Defaults to all"
                " update types except *chat_member*"
            )
        ),
    ] = None


class User(BaseModel):
    """
    This object represents a Telegram user or bot.
    """

    class Config:
        allow_mutation = False

    id: Annotated[
        StrictInt,
        Field(
            description=(
                "Unique identifier for this user or bot. This number may have more than 32"
                " significant bits and some programming languages may have difficulty/silent"
                " defects in interpreting it. But it has at most 52 significant bits, so a 64-bit"
                " integer or double-precision float type are safe for storing this identifier."
            )
        ),
    ]
    is_bot: Annotated[StrictBool, Field(description="*True*, if this user is a bot")]
    first_name: Annotated[StrictStr, Field(description="User's or bot's first name")]
    last_name: Annotated[
        Optional[StrictStr], Field(description="*Optional*. User's or bot's last name")
    ] = None
    username: Annotated[
        Optional[StrictStr], Field(description="*Optional*. User's or bot's username")
    ] = None
    language_code: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag)"
                " of the user's language"
            )
        ),
    ] = None
    can_join_groups: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. *True*, if the bot can be invited to groups. Returned only in"
                " [getMe](https://core.telegram.org/bots/api/#getme)."
            )
        ),
    ] = None
    can_read_all_group_messages: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. *True*, if [privacy"
                " mode](https://core.telegram.org/bots#privacy-mode) is disabled for the bot."
                " Returned only in [getMe](https://core.telegram.org/bots/api/#getme)."
            )
        ),
    ] = None
    supports_inline_queries: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. *True*, if the bot supports inline queries. Returned only in"
                " [getMe](https://core.telegram.org/bots/api/#getme)."
            )
        ),
    ] = None


class Type(Enum):
    """
    Type of chat, can be either “private”, “group”, “supergroup” or “channel”
    """

    private = "private"
    group = "group"
    supergroup = "supergroup"
    channel = "channel"


class MessageId(BaseModel):
    """
    This object represents a unique message identifier.
    """

    class Config:
        allow_mutation = False

    message_id: Annotated[StrictInt, Field(description="Unique message identifier")]


class EntityType(Enum):
    """
    Type of the entity. Currently, can be “mention” (`@username`), “hashtag” (`#hashtag`), “cashtag” (`$USD`), “bot_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “spoiler” (spoiler message), “code” (monowidth string), “pre” (monowidth block), “text_link” (for clickable text URLs), “text_mention” (for users [without usernames](https://telegram.org/blog/edit#new-mentions))
    """

    mention = "mention"
    hashtag = "hashtag"
    cashtag = "cashtag"
    bot_command = "bot_command"
    url = "url"
    email = "email"
    phone_number = "phone_number"
    bold = "bold"
    italic = "italic"
    underline = "underline"
    strikethrough = "strikethrough"
    spoiler = "spoiler"
    code = "code"
    pre = "pre"
    text_link = "text_link"
    text_mention = "text_mention"


class MessageEntity(BaseModel):
    """
    This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.
    """

    class Config:
        allow_mutation = False

    type: Annotated[
        EntityType,
        Field(
            description=(
                "Type of the entity. Currently, can be “mention” (`@username`), “hashtag”"
                " (`#hashtag`), “cashtag” (`$USD`), “bot_command” (`/start@jobs_bot`), “url”"
                " (`https://telegram.org`), “email” (`do-not-reply@telegram.org`),"
                " “phone_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic"
                " text*), “underline” (underlined text), “strikethrough” (strikethrough text),"
                " “spoiler” (spoiler message), “code” (monowidth string), “pre” (monowidth block),"
                " “text_link” (for clickable text URLs), “text_mention” (for users [without"
                " usernames](https://telegram.org/blog/edit#new-mentions))"
            )
        ),
    ]
    offset: Annotated[
        StrictInt, Field(description="Offset in UTF-16 code units to the start of the entity")
    ]
    length: Annotated[StrictInt, Field(description="Length of the entity in UTF-16 code units")]
    url: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. For “text_link” only, url that will be opened after user taps on"
                " the text"
            )
        ),
    ] = None
    user: Optional[User] = None
    language: Annotated[
        Optional[StrictStr],
        Field(
            description="*Optional*. For “pre” only, the programming language of the entity text"
        ),
    ] = None


class PhotoSize(BaseModel):
    """
    This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
    """

    class Config:
        allow_mutation = False

    file_id: Annotated[
        StrictStr,
        Field(
            description="Identifier for this file, which can be used to download or reuse the file"
        ),
    ]
    file_unique_id: Annotated[
        StrictStr,
        Field(
            description=(
                "Unique identifier for this file, which is supposed to be the same over time and"
                " for different bots. Can't be used to download or reuse the file."
            )
        ),
    ]
    width: Annotated[StrictInt, Field(description="Photo width")]
    height: Annotated[StrictInt, Field(description="Photo height")]
    file_size: Annotated[
        Optional[StrictInt], Field(description="*Optional*. File size in bytes")
    ] = None


class Animation(BaseModel):
    """
    This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
    """

    class Config:
        allow_mutation = False

    file_id: Annotated[
        StrictStr,
        Field(
            description="Identifier for this file, which can be used to download or reuse the file"
        ),
    ]
    file_unique_id: Annotated[
        StrictStr,
        Field(
            description=(
                "Unique identifier for this file, which is supposed to be the same over time and"
                " for different bots. Can't be used to download or reuse the file."
            )
        ),
    ]
    width: Annotated[StrictInt, Field(description="Video width as defined by sender")]
    height: Annotated[StrictInt, Field(description="Video height as defined by sender")]
    duration: Annotated[
        StrictInt, Field(description="Duration of the video in seconds as defined by sender")
    ]
    thumb: Optional[PhotoSize] = None
    file_name: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. Original animation filename as defined by sender"),
    ] = None
    mime_type: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. MIME type of the file as defined by sender"),
    ] = None
    file_size: Annotated[
        Optional[StrictInt], Field(description="*Optional*. File size in bytes")
    ] = None


class Audio(BaseModel):
    """
    This object represents an audio file to be treated as music by the Telegram clients.
    """

    class Config:
        allow_mutation = False

    file_id: Annotated[
        StrictStr,
        Field(
            description="Identifier for this file, which can be used to download or reuse the file"
        ),
    ]
    file_unique_id: Annotated[
        StrictStr,
        Field(
            description=(
                "Unique identifier for this file, which is supposed to be the same over time and"
                " for different bots. Can't be used to download or reuse the file."
            )
        ),
    ]
    duration: Annotated[
        StrictInt, Field(description="Duration of the audio in seconds as defined by sender")
    ]
    performer: Annotated[
        Optional[StrictStr],
        Field(
            description="*Optional*. Performer of the audio as defined by sender or by audio tags"
        ),
    ] = None
    title: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. Title of the audio as defined by sender or by audio tags"),
    ] = None
    file_name: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. Original filename as defined by sender"),
    ] = None
    mime_type: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. MIME type of the file as defined by sender"),
    ] = None
    file_size: Annotated[
        Optional[StrictInt], Field(description="*Optional*. File size in bytes")
    ] = None
    thumb: Optional[PhotoSize] = None


class Document(BaseModel):
    """
    This object represents a general file (as opposed to [photos](https://core.telegram.org/bots/api/#photosize), [voice messages](https://core.telegram.org/bots/api/#voice) and [audio files](https://core.telegram.org/bots/api/#audio)).
    """

    class Config:
        allow_mutation = False

    file_id: Annotated[
        StrictStr,
        Field(
            description="Identifier for this file, which can be used to download or reuse the file"
        ),
    ]
    file_unique_id: Annotated[
        StrictStr,
        Field(
            description=(
                "Unique identifier for this file, which is supposed to be the same over time and"
                " for different bots. Can't be used to download or reuse the file."
            )
        ),
    ]
    thumb: Optional[PhotoSize] = None
    file_name: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. Original filename as defined by sender"),
    ] = None
    mime_type: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. MIME type of the file as defined by sender"),
    ] = None
    file_size: Annotated[
        Optional[StrictInt], Field(description="*Optional*. File size in bytes")
    ] = None


class Video(BaseModel):
    """
    This object represents a video file.
    """

    class Config:
        allow_mutation = False

    file_id: Annotated[
        StrictStr,
        Field(
            description="Identifier for this file, which can be used to download or reuse the file"
        ),
    ]
    file_unique_id: Annotated[
        StrictStr,
        Field(
            description=(
                "Unique identifier for this file, which is supposed to be the same over time and"
                " for different bots. Can't be used to download or reuse the file."
            )
        ),
    ]
    width: Annotated[StrictInt, Field(description="Video width as defined by sender")]
    height: Annotated[StrictInt, Field(description="Video height as defined by sender")]
    duration: Annotated[
        StrictInt, Field(description="Duration of the video in seconds as defined by sender")
    ]
    thumb: Optional[PhotoSize] = None
    file_name: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. Original filename as defined by sender"),
    ] = None
    mime_type: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. Mime type of a file as defined by sender"),
    ] = None
    file_size: Annotated[
        Optional[StrictInt], Field(description="*Optional*. File size in bytes")
    ] = None


class VideoNote(BaseModel):
    """
    This object represents a [video message](https://telegram.org/blog/video-messages-and-telescope) (available in Telegram apps as of [v.4.0](https://telegram.org/blog/video-messages-and-telescope)).
    """

    class Config:
        allow_mutation = False

    file_id: Annotated[
        StrictStr,
        Field(
            description="Identifier for this file, which can be used to download or reuse the file"
        ),
    ]
    file_unique_id: Annotated[
        StrictStr,
        Field(
            description=(
                "Unique identifier for this file, which is supposed to be the same over time and"
                " for different bots. Can't be used to download or reuse the file."
            )
        ),
    ]
    length: Annotated[
        StrictInt,
        Field(
            description=(
                "Video width and height (diameter of the video message) as defined by sender"
            )
        ),
    ]
    duration: Annotated[
        StrictInt, Field(description="Duration of the video in seconds as defined by sender")
    ]
    thumb: Optional[PhotoSize] = None
    file_size: Annotated[
        Optional[StrictInt], Field(description="*Optional*. File size in bytes")
    ] = None


class Voice(BaseModel):
    """
    This object represents a voice note.
    """

    class Config:
        allow_mutation = False

    file_id: Annotated[
        StrictStr,
        Field(
            description="Identifier for this file, which can be used to download or reuse the file"
        ),
    ]
    file_unique_id: Annotated[
        StrictStr,
        Field(
            description=(
                "Unique identifier for this file, which is supposed to be the same over time and"
                " for different bots. Can't be used to download or reuse the file."
            )
        ),
    ]
    duration: Annotated[
        StrictInt, Field(description="Duration of the audio in seconds as defined by sender")
    ]
    mime_type: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. MIME type of the file as defined by sender"),
    ] = None
    file_size: Annotated[
        Optional[StrictInt], Field(description="*Optional*. File size in bytes")
    ] = None


class Contact(BaseModel):
    """
    This object represents a phone contact.
    """

    class Config:
        allow_mutation = False

    phone_number: Annotated[StrictStr, Field(description="Contact's phone number")]
    first_name: Annotated[StrictStr, Field(description="Contact's first name")]
    last_name: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Contact's last name")
    ] = None
    user_id: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. Contact's user identifier in Telegram. This number may have more than"
                " 32 significant bits and some programming languages may have difficulty/silent"
                " defects in interpreting it. But it has at most 52 significant bits, so a 64-bit"
                " integer or double-precision float type are safe for storing this identifier."
            )
        ),
    ] = None
    vcard: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Additional data about the contact in the form of a"
                " [vCard](https://en.wikipedia.org/wiki/VCard)"
            )
        ),
    ] = None


class Dice(BaseModel):
    """
    This object represents an animated emoji that displays a random value.
    """

    class Config:
        allow_mutation = False

    emoji: Annotated[
        StrictStr, Field(description="Emoji on which the dice throw animation is based")
    ]
    value: Annotated[
        StrictInt,
        Field(
            description=(
                "Value of the dice, 1-6 for “🎲”, “🎯” and “🎳” base emoji, 1-5 for “🏀” and “⚽” base"
                " emoji, 1-64 for “🎰” base emoji"
            )
        ),
    ]


class PollOption(BaseModel):
    """
    This object contains information about one answer option in a poll.
    """

    class Config:
        allow_mutation = False

    text: Annotated[StrictStr, Field(description="Option text, 1-100 characters")]
    voter_count: Annotated[
        StrictInt, Field(description="Number of users that voted for this option")
    ]


class PollAnswer(BaseModel):
    """
    This object represents an answer of a user in a non-anonymous poll.
    """

    class Config:
        allow_mutation = False

    poll_id: Annotated[StrictStr, Field(description="Unique poll identifier")]
    user: User
    option_ids: Annotated[
        Sequence[StrictInt],
        Field(
            description=(
                "0-based identifiers of answer options, chosen by the user. May be empty if the"
                " user retracted their vote."
            )
        ),
    ]


class PollType(Enum):
    """
    Poll type, currently can be “regular” or “quiz”
    """

    regular = "regular"
    quiz = "quiz"


class Poll(BaseModel):
    """
    This object contains information about a poll.
    """

    class Config:
        allow_mutation = False

    id: Annotated[StrictStr, Field(description="Unique poll identifier")]
    question: Annotated[StrictStr, Field(description="Poll question, 1-300 characters")]
    options: Annotated[Sequence[PollOption], Field(description="List of poll options")]
    total_voter_count: Annotated[
        StrictInt, Field(description="Total number of users that voted in the poll")
    ]
    is_closed: Annotated[StrictBool, Field(description="*True*, if the poll is closed")]
    is_anonymous: Annotated[StrictBool, Field(description="*True*, if the poll is anonymous")]
    type: Annotated[PollType, Field(description="Poll type, currently can be “regular” or “quiz”")]
    allows_multiple_answers: Annotated[
        StrictBool, Field(description="*True*, if the poll allows multiple answers")
    ]
    correct_option_id: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. 0-based identifier of the correct answer option. Available only for"
                " polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot"
                " or to the private chat with the bot."
            )
        ),
    ] = None
    explanation: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Text that is shown when a user chooses an incorrect answer or taps on"
                " the lamp icon in a quiz-style poll, 0-200 characters"
            )
        ),
    ] = None
    explanation_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. Special entities like usernames, URLs, bot commands, etc. that appear"
                " in the *explanation*"
            )
        ),
    ] = None
    open_period: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. Amount of time in seconds the poll will be active after creation"
            )
        ),
    ] = None
    close_date: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. Point in time (Unix timestamp) when the poll will be automatically"
                " closed"
            )
        ),
    ] = None


class Location(BaseModel):
    """
    This object represents a point on the map.
    """

    class Config:
        allow_mutation = False

    longitude: Annotated[StrictFloat, Field(description="Longitude as defined by sender")]
    latitude: Annotated[StrictFloat, Field(description="Latitude as defined by sender")]
    horizontal_accuracy: Annotated[
        Optional[StrictFloat],
        Field(
            description=(
                "*Optional*. The radius of uncertainty for the location, measured in meters;"
                " 0-1500"
            )
        ),
    ] = None
    live_period: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. Time relative to the message sending date, during which the location"
                " can be updated; in seconds. For active live locations only."
            )
        ),
    ] = None
    heading: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. The direction in which user is moving, in degrees; 1-360. For active"
                " live locations only."
            )
        ),
    ] = None
    proximity_alert_radius: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. Maximum distance for proximity alerts about approaching another chat"
                " member, in meters. For sent live locations only."
            )
        ),
    ] = None


class Venue(BaseModel):
    """
    This object represents a venue.
    """

    class Config:
        allow_mutation = False

    location: Location
    title: Annotated[StrictStr, Field(description="Name of the venue")]
    address: Annotated[StrictStr, Field(description="Address of the venue")]
    foursquare_id: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Foursquare identifier of the venue")
    ] = None
    foursquare_type: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Foursquare type of the venue. (For example,"
                " “arts_entertainment/default”, “arts_entertainment/aquarium” or"
                " “food/icecream”.)"
            )
        ),
    ] = None
    google_place_id: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Google Places identifier of the venue")
    ] = None
    google_place_type: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Google Places type of the venue. (See [supported"
                " types](https://developers.google.com/places/web-service/supported_types).)"
            )
        ),
    ] = None


class ProximityAlertTriggered(BaseModel):
    """
    This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.
    """

    class Config:
        allow_mutation = False

    traveler: User
    watcher: User
    distance: Annotated[StrictInt, Field(description="The distance between the users")]


class MessageAutoDeleteTimerChanged(BaseModel):
    """
    This object represents a service message about a change in auto-delete timer settings.
    """

    class Config:
        allow_mutation = False

    message_auto_delete_time: Annotated[
        StrictInt, Field(description="New auto-delete time for messages in the chat; in seconds")
    ]


class VoiceChatScheduled(BaseModel):
    """
    This object represents a service message about a voice chat scheduled in the chat.
    """

    class Config:
        allow_mutation = False

    start_date: Annotated[
        StrictInt,
        Field(
            description=(
                "Point in time (Unix timestamp) when the voice chat is supposed to be started by a"
                " chat administrator"
            )
        ),
    ]


class VoiceChatStarted(BaseModel):
    class Config:
        allow_mutation = False

    __root__: Annotated[
        Any,
        Field(
            description=(
                "This object represents a service message about a voice chat started in the chat."
                " Currently holds no information."
            )
        ),
    ]


class VoiceChatEnded(BaseModel):
    """
    This object represents a service message about a voice chat ended in the chat.
    """

    class Config:
        allow_mutation = False

    duration: Annotated[StrictInt, Field(description="Voice chat duration in seconds")]


class VoiceChatParticipantsInvited(BaseModel):
    """
    This object represents a service message about new members invited to a voice chat.
    """

    class Config:
        allow_mutation = False

    users: Annotated[
        Optional[Sequence[User]],
        Field(description="*Optional*. New members that were invited to the voice chat"),
    ] = None


class UserProfilePhotos(BaseModel):
    """
    This object represent a user's profile pictures.
    """

    class Config:
        allow_mutation = False

    total_count: Annotated[
        StrictInt, Field(description="Total number of profile pictures the target user has")
    ]
    photos: Annotated[
        Sequence[Sequence[PhotoSize]],
        Field(description="Requested profile pictures (in up to 4 sizes each)"),
    ]


class File(BaseModel):
    """
        This object represents a file ready to be downloaded. The file can be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile).

    Maximum file size to download is 20 MB
    """

    class Config:
        allow_mutation = False

    file_id: Annotated[
        StrictStr,
        Field(
            description="Identifier for this file, which can be used to download or reuse the file"
        ),
    ]
    file_unique_id: Annotated[
        StrictStr,
        Field(
            description=(
                "Unique identifier for this file, which is supposed to be the same over time and"
                " for different bots. Can't be used to download or reuse the file."
            )
        ),
    ]
    file_size: Annotated[
        Optional[StrictInt], Field(description="*Optional*. File size in bytes, if known")
    ] = None
    file_path: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. File path. Use `https://api.telegram.org/file/bot<token>/<file_path>`"
                " to get the file."
            )
        ),
    ] = None


class KeyboardButtonPollType(BaseModel):
    """
    This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.
    """

    class Config:
        allow_mutation = False

    type: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. If *quiz* is passed, the user will be allowed to create only polls in"
                " the quiz mode. If *regular* is passed, only regular polls will be allowed."
                " Otherwise, the user will be allowed to create a poll of any type."
            )
        ),
    ] = None


class ReplyKeyboardRemove(BaseModel):
    """
    Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup)).
    """

    class Config:
        allow_mutation = False

    remove_keyboard: Annotated[
        StrictBool,
        Field(
            description=(
                "Requests clients to remove the custom keyboard (user will not be able to summon"
                " this keyboard; if you want to hide the keyboard from sight but keep it"
                " accessible, use *one_time_keyboard* in"
                " [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup))"
            )
        ),
    ]
    selective: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. Use this parameter if you want to remove the keyboard for specific"
                " users only. Targets: 1) users that are @mentioned in the *text* of the"
                " [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's"
                " message is a reply (has *reply_to_message_id*), sender of the original"
                " message.  \n\n*Example:* A user votes in a poll, bot returns confirmation"
                " message in reply to the vote and removes the keyboard for that user, while still"
                " showing the keyboard with poll options to users who haven't voted yet."
            )
        ),
    ] = None


class LoginUrl(BaseModel):
    """
        This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the [Telegram Login Widget](https://core.telegram.org/widgets/login) when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in:

    Telegram apps support these buttons as of [version 5.7](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots).

    Sample bot: [@discussbot](https://t.me/discussbot)
    """

    class Config:
        allow_mutation = False

    url: Annotated[
        StrictStr,
        Field(
            description=(
                "An HTTP URL to be opened with user authorization data added to the query string"
                " when the button is pressed. If the user refuses to provide authorization data,"
                " the original URL without information about the user will be opened. The data"
                " added is the same as described in [Receiving authorization"
                " data](https://core.telegram.org/widgets/login#receiving-authorization-data). "
                " \n\n**NOTE:** You **must** always check the hash of the received data to verify"
                " the authentication and the integrity of the data as described in [Checking"
                " authorization](https://core.telegram.org/widgets/login#checking-authorization)."
            )
        ),
    ]
    forward_text: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. New text of the button in forwarded messages."),
    ] = None
    bot_username: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Username of a bot, which will be used for user authorization. See"
                " [Setting up a bot](https://core.telegram.org/widgets/login#setting-up-a-bot) for"
                " more details. If not specified, the current bot's username will be assumed. The"
                " *url*'s domain must be the same as the domain linked with the bot. See [Linking"
                " your domain to the"
                " bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for"
                " more details."
            )
        ),
    ] = None
    request_write_access: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. Pass *True* to request the permission for your bot to send messages"
                " to the user."
            )
        ),
    ] = None


class ForceReply(BaseModel):
    """
    Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice [privacy mode](/bots#privacy-mode).
    """

    class Config:
        allow_mutation = False

    force_reply: Annotated[
        StrictBool,
        Field(
            description=(
                "Shows reply interface to the user, as if they manually selected the bot's message"
                " and tapped 'Reply'"
            )
        ),
    ]
    input_field_placeholder: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. The placeholder to be shown in the input field when the reply is"
                " active; 1-64 characters"
            )
        ),
    ] = None
    selective: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. Use this parameter if you want to force reply from specific users"
                " only. Targets: 1) users that are @mentioned in the *text* of the"
                " [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's"
                " message is a reply (has *reply_to_message_id*), sender of the original"
                " message."
            )
        ),
    ] = None


class ChatPhoto(BaseModel):
    """
    This object represents a chat photo.
    """

    class Config:
        allow_mutation = False

    small_file_id: Annotated[
        StrictStr,
        Field(
            description=(
                "File identifier of small (160x160) chat photo. This file_id can be used only"
                " for photo download and only for as long as the photo is not changed."
            )
        ),
    ]
    small_file_unique_id: Annotated[
        StrictStr,
        Field(
            description=(
                "Unique file identifier of small (160x160) chat photo, which is supposed to be the"
                " same over time and for different bots. Can't be used to download or reuse the"
                " file."
            )
        ),
    ]
    big_file_id: Annotated[
        StrictStr,
        Field(
            description=(
                "File identifier of big (640x640) chat photo. This file_id can be used only for"
                " photo download and only for as long as the photo is not changed."
            )
        ),
    ]
    big_file_unique_id: Annotated[
        StrictStr,
        Field(
            description=(
                "Unique file identifier of big (640x640) chat photo, which is supposed to be the"
                " same over time and for different bots. Can't be used to download or reuse the"
                " file."
            )
        ),
    ]


class ChatInviteLink(BaseModel):
    """
    Represents an invite link for a chat.
    """

    class Config:
        allow_mutation = False

    invite_link: Annotated[
        StrictStr,
        Field(
            description=(
                "The invite link. If the link was created by another chat administrator, then the"
                " second part of the link will be replaced with “…”."
            )
        ),
    ]
    creator: User
    creates_join_request: Annotated[
        StrictBool,
        Field(
            description=(
                "*True*, if users joining the chat via the link need to be approved by chat"
                " administrators"
            )
        ),
    ]
    is_primary: Annotated[StrictBool, Field(description="*True*, if the link is primary")]
    is_revoked: Annotated[StrictBool, Field(description="*True*, if the link is revoked")]
    name: Annotated[Optional[StrictStr], Field(description="*Optional*. Invite link name")] = None
    expire_date: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. Point in time (Unix timestamp) when the link will expire or has been"
                " expired"
            )
        ),
    ] = None
    member_limit: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. Maximum number of users that can be members of the chat"
                " simultaneously after joining the chat via this invite link; 1-99999"
            )
        ),
    ] = None
    pending_join_request_count: Annotated[
        Optional[StrictInt],
        Field(description="*Optional*. Number of pending join requests created using this link"),
    ] = None


class ChatMemberOwner(BaseModel):
    """
    Represents a [chat member](https://core.telegram.org/bots/api/#chatmember) that owns the chat and has all administrator privileges.
    """

    class Config:
        allow_mutation = False

    status: Annotated[
        StrictStr, Field(description="The member's status in the chat, always “creator”")
    ]
    user: User
    is_anonymous: Annotated[
        StrictBool, Field(description="*True*, if the user's presence in the chat is hidden")
    ]
    custom_title: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Custom title for this user")
    ] = None


class ChatMemberAdministrator(BaseModel):
    """
    Represents a [chat member](https://core.telegram.org/bots/api/#chatmember) that has some additional privileges.
    """

    class Config:
        allow_mutation = False

    status: Annotated[
        StrictStr, Field(description="The member's status in the chat, always “administrator”")
    ]
    user: User
    can_be_edited: Annotated[
        StrictBool,
        Field(
            description=(
                "*True*, if the bot is allowed to edit administrator privileges of that user"
            )
        ),
    ]
    is_anonymous: Annotated[
        StrictBool, Field(description="*True*, if the user's presence in the chat is hidden")
    ]
    can_manage_chat: Annotated[
        StrictBool,
        Field(
            description=(
                "*True*, if the administrator can access the chat event log, chat statistics,"
                " message statistics in channels, see channel members, see anonymous"
                " administrators in supergroups and ignore slow mode. Implied by any other"
                " administrator privilege"
            )
        ),
    ]
    can_delete_messages: Annotated[
        StrictBool,
        Field(description="*True*, if the administrator can delete messages of other users"),
    ]
    can_manage_voice_chats: Annotated[
        StrictBool, Field(description="*True*, if the administrator can manage voice chats")
    ]
    can_restrict_members: Annotated[
        StrictBool,
        Field(description="*True*, if the administrator can restrict, ban or unban chat members"),
    ]
    can_promote_members: Annotated[
        StrictBool,
        Field(
            description=(
                "*True*, if the administrator can add new administrators with a subset of their"
                " own privileges or demote administrators that he has promoted, directly or"
                " indirectly (promoted by administrators that were appointed by the user)"
            )
        ),
    ]
    can_change_info: Annotated[
        StrictBool,
        Field(
            description=(
                "*True*, if the user is allowed to change the chat title, photo and other settings"
            )
        ),
    ]
    can_invite_users: Annotated[
        StrictBool,
        Field(description="*True*, if the user is allowed to invite new users to the chat"),
    ]
    can_post_messages: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. *True*, if the administrator can post in the channel; channels only"
            )
        ),
    ] = None
    can_edit_messages: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. *True*, if the administrator can edit messages of other users and can"
                " pin messages; channels only"
            )
        ),
    ] = None
    can_pin_messages: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. *True*, if the user is allowed to pin messages; groups and"
                " supergroups only"
            )
        ),
    ] = None
    custom_title: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Custom title for this user")
    ] = None


class ChatMemberMember(BaseModel):
    """
    Represents a [chat member](https://core.telegram.org/bots/api/#chatmember) that has no additional privileges or restrictions.
    """

    class Config:
        allow_mutation = False

    status: Annotated[
        StrictStr, Field(description="The member's status in the chat, always “member”")
    ]
    user: User


class ChatMemberRestricted(BaseModel):
    """
    Represents a [chat member](https://core.telegram.org/bots/api/#chatmember) that is under certain restrictions in the chat. Supergroups only.
    """

    class Config:
        allow_mutation = False

    status: Annotated[
        StrictStr, Field(description="The member's status in the chat, always “restricted”")
    ]
    user: User
    is_member: Annotated[
        StrictBool,
        Field(
            description="*True*, if the user is a member of the chat at the moment of the request"
        ),
    ]
    can_change_info: Annotated[
        StrictBool,
        Field(
            description=(
                "*True*, if the user is allowed to change the chat title, photo and other settings"
            )
        ),
    ]
    can_invite_users: Annotated[
        StrictBool,
        Field(description="*True*, if the user is allowed to invite new users to the chat"),
    ]
    can_pin_messages: Annotated[
        StrictBool, Field(description="*True*, if the user is allowed to pin messages")
    ]
    can_send_messages: Annotated[
        StrictBool,
        Field(
            description=(
                "*True*, if the user is allowed to send text messages, contacts, locations and"
                " venues"
            )
        ),
    ]
    can_send_media_messages: Annotated[
        StrictBool,
        Field(
            description=(
                "*True*, if the user is allowed to send audios, documents, photos, videos, video"
                " notes and voice notes"
            )
        ),
    ]
    can_send_polls: Annotated[
        StrictBool, Field(description="*True*, if the user is allowed to send polls")
    ]
    can_send_other_messages: Annotated[
        StrictBool,
        Field(
            description=(
                "*True*, if the user is allowed to send animations, games, stickers and use inline"
                " bots"
            )
        ),
    ]
    can_add_web_page_previews: Annotated[
        StrictBool,
        Field(
            description="*True*, if the user is allowed to add web page previews to their messages"
        ),
    ]
    until_date: Annotated[
        StrictInt,
        Field(
            description=(
                "Date when restrictions will be lifted for this user; unix time. If 0, then the"
                " user is restricted forever"
            )
        ),
    ]


class ChatMemberLeft(BaseModel):
    """
    Represents a [chat member](https://core.telegram.org/bots/api/#chatmember) that isn't currently a member of the chat, but may join it themselves.
    """

    class Config:
        allow_mutation = False

    status: Annotated[
        StrictStr, Field(description="The member's status in the chat, always “left”")
    ]
    user: User


class ChatMemberBanned(BaseModel):
    """
    Represents a [chat member](https://core.telegram.org/bots/api/#chatmember) that was banned in the chat and can't return to the chat or view chat messages.
    """

    class Config:
        allow_mutation = False

    status: Annotated[
        StrictStr, Field(description="The member's status in the chat, always “kicked”")
    ]
    user: User
    until_date: Annotated[
        StrictInt,
        Field(
            description=(
                "Date when restrictions will be lifted for this user; unix time. If 0, then the"
                " user is banned forever"
            )
        ),
    ]


class ChatPermissions(BaseModel):
    """
    Describes actions that a non-administrator user is allowed to take in a chat.
    """

    class Config:
        allow_mutation = False

    can_send_messages: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. *True*, if the user is allowed to send text messages, contacts,"
                " locations and venues"
            )
        ),
    ] = None
    can_send_media_messages: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. *True*, if the user is allowed to send audios, documents, photos,"
                " videos, video notes and voice notes, implies can_send_messages"
            )
        ),
    ] = None
    can_send_polls: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. *True*, if the user is allowed to send polls, implies"
                " can_send_messages"
            )
        ),
    ] = None
    can_send_other_messages: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. *True*, if the user is allowed to send animations, games, stickers"
                " and use inline bots, implies can_send_media_messages"
            )
        ),
    ] = None
    can_add_web_page_previews: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. *True*, if the user is allowed to add web page previews to their"
                " messages, implies can_send_media_messages"
            )
        ),
    ] = None
    can_change_info: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. *True*, if the user is allowed to change the chat title, photo and"
                " other settings. Ignored in public supergroups"
            )
        ),
    ] = None
    can_invite_users: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. *True*, if the user is allowed to invite new users to the chat"
            )
        ),
    ] = None
    can_pin_messages: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. *True*, if the user is allowed to pin messages. Ignored in public"
                " supergroups"
            )
        ),
    ] = None


class ChatLocation(BaseModel):
    """
    Represents a location to which a chat is connected.
    """

    class Config:
        allow_mutation = False

    location: Location
    address: Annotated[
        StrictStr,
        Field(description="Location address; 1-64 characters, as defined by the chat owner"),
    ]


class BotCommand(BaseModel):
    """
    This object represents a bot command.
    """

    class Config:
        allow_mutation = False

    command: Annotated[
        StrictStr,
        Field(
            description=(
                "Text of the command; 1-32 characters. Can contain only lowercase English letters,"
                " digits and underscores."
            )
        ),
    ]
    description: Annotated[
        StrictStr, Field(description="Description of the command; 1-256 characters.")
    ]


class BotCommandScopeDefault(BaseModel):
    """
    Represents the default [scope](https://core.telegram.org/bots/api/#botcommandscope) of bot commands. Default commands are used if no commands with a [narrower scope](https://core.telegram.org/bots/api/#determining-list-of-commands) are specified for the user.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Scope type, must be *default*")]


class BotCommandScopeAllPrivateChats(BaseModel):
    """
    Represents the [scope](https://core.telegram.org/bots/api/#botcommandscope) of bot commands, covering all private chats.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Scope type, must be *all_private_chats*")]


class BotCommandScopeAllGroupChats(BaseModel):
    """
    Represents the [scope](https://core.telegram.org/bots/api/#botcommandscope) of bot commands, covering all group and supergroup chats.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Scope type, must be *all_group_chats*")]


class BotCommandScopeAllChatAdministrators(BaseModel):
    """
    Represents the [scope](https://core.telegram.org/bots/api/#botcommandscope) of bot commands, covering all group and supergroup chat administrators.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Scope type, must be *all_chat_administrators*")]


class BotCommandScopeChat(BaseModel):
    """
    Represents the [scope](https://core.telegram.org/bots/api/#botcommandscope) of bot commands, covering a specific chat.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Scope type, must be *chat*")]
    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target supergroup (in"
                " the format `@supergroupusername`)"
            )
        ),
    ]


class BotCommandScopeChatAdministrators(BaseModel):
    """
    Represents the [scope](https://core.telegram.org/bots/api/#botcommandscope) of bot commands, covering all administrators of a specific group or supergroup chat.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Scope type, must be *chat_administrators*")]
    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target supergroup (in"
                " the format `@supergroupusername`)"
            )
        ),
    ]


class BotCommandScopeChatMember(BaseModel):
    """
    Represents the [scope](https://core.telegram.org/bots/api/#botcommandscope) of bot commands, covering a specific member of a group or supergroup chat.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Scope type, must be *chat_member*")]
    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target supergroup (in"
                " the format `@supergroupusername`)"
            )
        ),
    ]
    user_id: Annotated[StrictInt, Field(description="Unique identifier of the target user")]


class ResponseParameters(BaseModel):
    """
    Contains information about why a request was unsuccessful.
    """

    class Config:
        allow_mutation = False

    migrate_to_chat_id: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. The group has been migrated to a supergroup with the specified"
                " identifier. This number may have more than 32 significant bits and some"
                " programming languages may have difficulty/silent defects in interpreting it. But"
                " it has at most 52 significant bits, so a signed 64-bit integer or"
                " double-precision float type are safe for storing this identifier."
            )
        ),
    ] = None
    retry_after: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. In case of exceeding flood control, the number of seconds left to"
                " wait before the request can be repeated"
            )
        ),
    ] = None


class InputMediaPhoto(BaseModel):
    """
    Represents a photo to be sent.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *photo*")]
    media: Annotated[
        StrictStr,
        Field(
            description=(
                "File to send. Pass a file_id to send a file that exists on the Telegram servers"
                " (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or"
                " pass “attach://<file_attach_name>” to upload a new one using"
                " multipart/form-data under <file_attach_name> name. [More info on Sending"
                " Files »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ]
    caption: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Caption of the photo to be sent, 0-1024 characters after entities"
                " parsing"
            )
        ),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Mode for parsing entities in the photo caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. List of special entities that appear in the caption, which can be"
                " specified instead of *parse_mode*"
            )
        ),
    ] = None


class InputFile(BaseModel):
    class Config:
        allow_mutation = False

    __root__: Annotated[
        Any,
        Field(
            description=(
                "This object represents the contents of a file to be uploaded. Must be posted"
                " using multipart/form-data in the usual way that files are uploaded via the"
                " browser."
            )
        ),
    ]


class Point(Enum):
    """
    The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.
    """

    forehead = "forehead"
    eyes = "eyes"
    mouth = "mouth"
    chin = "chin"


class MaskPosition(BaseModel):
    """
    This object describes the position on faces where a mask should be placed by default.
    """

    class Config:
        allow_mutation = False

    point: Annotated[
        Point,
        Field(
            description=(
                "The part of the face relative to which the mask should be placed. One of"
                " “forehead”, “eyes”, “mouth”, or “chin”."
            )
        ),
    ]
    x_shift: Annotated[
        StrictFloat,
        Field(
            description=(
                "Shift by X-axis measured in widths of the mask scaled to the face size, from left"
                " to right. For example, choosing -1.0 will place mask just to the left of the"
                " default mask position."
            )
        ),
    ]
    y_shift: Annotated[
        StrictFloat,
        Field(
            description=(
                "Shift by Y-axis measured in heights of the mask scaled to the face size, from top"
                " to bottom. For example, 1.0 will place the mask just below the default mask"
                " position."
            )
        ),
    ]
    scale: Annotated[
        StrictFloat,
        Field(description="Mask scaling coefficient. For example, 2.0 means double size."),
    ]


class ChatType(Enum):
    """
    *Optional*. Type of the chat, from which the inline query was sent. Can be either “sender” for a private chat with the inline query sender, “private”, “group”, “supergroup”, or “channel”. The chat type should be always known for requests sent from official clients and most third-party clients, unless the request was sent from a secret chat
    """

    sender = "sender"
    private = "private"
    group = "group"
    supergroup = "supergroup"
    channel = "channel"


class InlineQuery(BaseModel):
    """
    This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.
    """

    class Config:
        allow_mutation = False

    id: Annotated[StrictStr, Field(description="Unique identifier for this query")]
    from_: Annotated[User, Field(alias="from")]
    query: Annotated[StrictStr, Field(description="Text of the query (up to 256 characters)")]
    offset: Annotated[
        StrictStr,
        Field(description="Offset of the results to be returned, can be controlled by the bot"),
    ]
    chat_type: Annotated[
        Optional[ChatType],
        Field(
            description=(
                "*Optional*. Type of the chat, from which the inline query was sent. Can be either"
                " “sender” for a private chat with the inline query sender, “private”, “group”,"
                " “supergroup”, or “channel”. The chat type should be always known for requests"
                " sent from official clients and most third-party clients, unless the request was"
                " sent from a secret chat"
            )
        ),
    ] = None
    location: Optional[Location] = None


class ThumbMimeType(Enum):
    """
    *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
    """

    image_jpeg = "image/jpeg"
    image_gif = "image/gif"
    video_mp4 = "video/mp4"


class MimeType(Enum):
    """
    Mime type of the content of video url, “text/html” or “video/mp4”
    """

    text_html = "text/html"
    video_mp4 = "video/mp4"


class DocumentMimeType(Enum):
    """
    Mime type of the content of the file, either “application/pdf” or “application/zip”
    """

    application_pdf = "application/pdf"
    application_zip = "application/zip"


class InputTextMessageContent(BaseModel):
    """
    Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a text message to be sent as the result of an inline query.
    """

    class Config:
        allow_mutation = False

    message_text: Annotated[
        StrictStr, Field(description="Text of the message to be sent, 1-4096 characters")
    ]
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Mode for parsing entities in the message text. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. List of special entities that appear in message text, which can be"
                " specified instead of *parse_mode*"
            )
        ),
    ] = None
    disable_web_page_preview: Annotated[
        Optional[StrictBool],
        Field(description="*Optional*. Disables link previews for links in the sent message"),
    ] = None


class InputLocationMessageContent(BaseModel):
    """
    Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a location message to be sent as the result of an inline query.
    """

    class Config:
        allow_mutation = False

    latitude: Annotated[StrictFloat, Field(description="Latitude of the location in degrees")]
    longitude: Annotated[StrictFloat, Field(description="Longitude of the location in degrees")]
    horizontal_accuracy: Annotated[
        Optional[StrictFloat],
        Field(
            description=(
                "*Optional*. The radius of uncertainty for the location, measured in meters;"
                " 0-1500"
            )
        ),
    ] = None
    live_period: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. Period in seconds for which the location can be updated, should be"
                " between 60 and 86400."
            )
        ),
    ] = None
    heading: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. For live locations, a direction in which the user is moving, in"
                " degrees. Must be between 1 and 360 if specified."
            )
        ),
    ] = None
    proximity_alert_radius: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. For live locations, a maximum distance for proximity alerts about"
                " approaching another chat member, in meters. Must be between 1 and 100000 if"
                " specified."
            )
        ),
    ] = None


class InputVenueMessageContent(BaseModel):
    """
    Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a venue message to be sent as the result of an inline query.
    """

    class Config:
        allow_mutation = False

    latitude: Annotated[StrictFloat, Field(description="Latitude of the venue in degrees")]
    longitude: Annotated[StrictFloat, Field(description="Longitude of the venue in degrees")]
    title: Annotated[StrictStr, Field(description="Name of the venue")]
    address: Annotated[StrictStr, Field(description="Address of the venue")]
    foursquare_id: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. Foursquare identifier of the venue, if known"),
    ] = None
    foursquare_type: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Foursquare type of the venue, if known. (For example,"
                " “arts_entertainment/default”, “arts_entertainment/aquarium” or"
                " “food/icecream”.)"
            )
        ),
    ] = None
    google_place_id: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Google Places identifier of the venue")
    ] = None
    google_place_type: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Google Places type of the venue. (See [supported"
                " types](https://developers.google.com/places/web-service/supported_types).)"
            )
        ),
    ] = None


class InputContactMessageContent(BaseModel):
    """
    Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a contact message to be sent as the result of an inline query.
    """

    class Config:
        allow_mutation = False

    phone_number: Annotated[StrictStr, Field(description="Contact's phone number")]
    first_name: Annotated[StrictStr, Field(description="Contact's first name")]
    last_name: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Contact's last name")
    ] = None
    vcard: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Additional data about the contact in the form of a"
                " [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes"
            )
        ),
    ] = None


class ChosenInlineResult(BaseModel):
    """
    Represents a [result](https://core.telegram.org/bots/api/#inlinequeryresult) of an inline query that was chosen by the user and sent to their chat partner.
    """

    class Config:
        allow_mutation = False

    result_id: Annotated[
        StrictStr, Field(description="The unique identifier for the result that was chosen")
    ]
    from_: Annotated[User, Field(alias="from")]
    location: Optional[Location] = None
    inline_message_id: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Identifier of the sent inline message. Available only if there is an"
                " [inline keyboard](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)"
                " attached to the message. Will be also received in [callback"
                " queries](https://core.telegram.org/bots/api/#callbackquery) and can be used to"
                " [edit](https://core.telegram.org/bots/api/#updating-messages) the message."
            )
        ),
    ] = None
    query: Annotated[StrictStr, Field(description="The query that was used to obtain the result")]


class LabeledPrice(BaseModel):
    """
    This object represents a portion of the price for goods or services.
    """

    class Config:
        allow_mutation = False

    label: Annotated[StrictStr, Field(description="Portion label")]
    amount: Annotated[
        StrictInt,
        Field(
            description=(
                "Price of the product in the *smallest units* of the"
                " [currency](/bots/payments#supported-currencies) (integer, **not** float/double)."
                " For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp*"
                " parameter in"
                " [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it"
                " shows the number of digits past the decimal point for each currency (2 for the"
                " majority of currencies)."
            )
        ),
    ]


class Invoice(BaseModel):
    """
    This object contains basic information about an invoice.
    """

    class Config:
        allow_mutation = False

    title: Annotated[StrictStr, Field(description="Product name")]
    description: Annotated[StrictStr, Field(description="Product description")]
    start_parameter: Annotated[
        StrictStr,
        Field(
            description=(
                "Unique bot deep-linking parameter that can be used to generate this invoice"
            )
        ),
    ]
    currency: Annotated[
        StrictStr,
        Field(
            description=(
                "Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code"
            )
        ),
    ]
    total_amount: Annotated[
        StrictInt,
        Field(
            description=(
                "Total price in the *smallest units* of the currency (integer, **not**"
                " float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See"
                " the *exp* parameter in"
                " [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it"
                " shows the number of digits past the decimal point for each currency (2 for the"
                " majority of currencies)."
            )
        ),
    ]


class ShippingAddress(BaseModel):
    """
    This object represents a shipping address.
    """

    class Config:
        allow_mutation = False

    country_code: Annotated[StrictStr, Field(description="ISO 3166-1 alpha-2 country code")]
    state: Annotated[StrictStr, Field(description="State, if applicable")]
    city: Annotated[StrictStr, Field(description="City")]
    street_line1: Annotated[StrictStr, Field(description="First line for the address")]
    street_line2: Annotated[StrictStr, Field(description="Second line for the address")]
    post_code: Annotated[StrictStr, Field(description="Address post code")]


class OrderInfo(BaseModel):
    """
    This object represents information about an order.
    """

    class Config:
        allow_mutation = False

    name: Annotated[Optional[StrictStr], Field(description="*Optional*. User name")] = None
    phone_number: Annotated[
        Optional[StrictStr], Field(description="*Optional*. User's phone number")
    ] = None
    email: Annotated[Optional[StrictStr], Field(description="*Optional*. User email")] = None
    shipping_address: Optional[ShippingAddress] = None


class ShippingOption(BaseModel):
    """
    This object represents one shipping option.
    """

    class Config:
        allow_mutation = False

    id: Annotated[StrictStr, Field(description="Shipping option identifier")]
    title: Annotated[StrictStr, Field(description="Option title")]
    prices: Annotated[Sequence[LabeledPrice], Field(description="List of price portions")]


class SuccessfulPayment(BaseModel):
    """
    This object contains basic information about a successful payment.
    """

    class Config:
        allow_mutation = False

    currency: Annotated[
        StrictStr,
        Field(
            description=(
                "Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code"
            )
        ),
    ]
    total_amount: Annotated[
        StrictInt,
        Field(
            description=(
                "Total price in the *smallest units* of the currency (integer, **not**"
                " float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See"
                " the *exp* parameter in"
                " [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it"
                " shows the number of digits past the decimal point for each currency (2 for the"
                " majority of currencies)."
            )
        ),
    ]
    invoice_payload: Annotated[StrictStr, Field(description="Bot specified invoice payload")]
    shipping_option_id: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. Identifier of the shipping option chosen by the user"),
    ] = None
    order_info: Optional[OrderInfo] = None
    telegram_payment_charge_id: Annotated[
        StrictStr, Field(description="Telegram payment identifier")
    ]
    provider_payment_charge_id: Annotated[
        StrictStr, Field(description="Provider payment identifier")
    ]


class ShippingQuery(BaseModel):
    """
    This object contains information about an incoming shipping query.
    """

    class Config:
        allow_mutation = False

    id: Annotated[StrictStr, Field(description="Unique query identifier")]
    from_: Annotated[User, Field(alias="from")]
    invoice_payload: Annotated[StrictStr, Field(description="Bot specified invoice payload")]
    shipping_address: ShippingAddress


class PreCheckoutQuery(BaseModel):
    """
    This object contains information about an incoming pre-checkout query.
    """

    class Config:
        allow_mutation = False

    id: Annotated[StrictStr, Field(description="Unique query identifier")]
    from_: Annotated[User, Field(alias="from")]
    currency: Annotated[
        StrictStr,
        Field(
            description=(
                "Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code"
            )
        ),
    ]
    total_amount: Annotated[
        StrictInt,
        Field(
            description=(
                "Total price in the *smallest units* of the currency (integer, **not**"
                " float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See"
                " the *exp* parameter in"
                " [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it"
                " shows the number of digits past the decimal point for each currency (2 for the"
                " majority of currencies)."
            )
        ),
    ]
    invoice_payload: Annotated[StrictStr, Field(description="Bot specified invoice payload")]
    shipping_option_id: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. Identifier of the shipping option chosen by the user"),
    ] = None
    order_info: Optional[OrderInfo] = None


class PassportFile(BaseModel):
    """
    This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.
    """

    class Config:
        allow_mutation = False

    file_id: Annotated[
        StrictStr,
        Field(
            description="Identifier for this file, which can be used to download or reuse the file"
        ),
    ]
    file_unique_id: Annotated[
        StrictStr,
        Field(
            description=(
                "Unique identifier for this file, which is supposed to be the same over time and"
                " for different bots. Can't be used to download or reuse the file."
            )
        ),
    ]
    file_size: Annotated[StrictInt, Field(description="File size in bytes")]
    file_date: Annotated[StrictInt, Field(description="Unix time when the file was uploaded")]


class ElementType(Enum):
    """
    Element type. One of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”, “phone_number”, “email”.
    """

    personal_details = "personal_details"
    passport = "passport"
    driver_license = "driver_license"
    identity_card = "identity_card"
    internal_passport = "internal_passport"
    address = "address"
    utility_bill = "utility_bill"
    bank_statement = "bank_statement"
    rental_agreement = "rental_agreement"
    passport_registration = "passport_registration"
    temporary_registration = "temporary_registration"
    phone_number = "phone_number"
    email = "email"


class EncryptedPassportElement(BaseModel):
    """
    Contains information about documents or other Telegram Passport elements shared with the bot by the user.
    """

    class Config:
        allow_mutation = False

    type: Annotated[
        ElementType,
        Field(
            description=(
                "Element type. One of “personal_details”, “passport”, “driver_license”,"
                " “identity_card”, “internal_passport”, “address”, “utility_bill”,"
                " “bank_statement”, “rental_agreement”, “passport_registration”,"
                " “temporary_registration”, “phone_number”, “email”."
            )
        ),
    ]
    data: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Base64-encoded encrypted Telegram Passport element data provided by"
                " the user, available for “personal_details”, “passport”, “driver_license”,"
                " “identity_card”, “internal_passport” and “address” types. Can be decrypted"
                " and verified using the accompanying"
                " [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials)."
            )
        ),
    ] = None
    phone_number: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. User's verified phone number, available only for “phone_number”"
                " type"
            )
        ),
    ] = None
    email: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. User's verified email address, available only for “email” type"
            )
        ),
    ] = None
    files: Annotated[
        Optional[Sequence[PassportFile]],
        Field(
            description=(
                "*Optional*. Array of encrypted files with documents provided by the user,"
                " available for “utility_bill”, “bank_statement”, “rental_agreement”,"
                " “passport_registration” and “temporary_registration” types. Files can be"
                " decrypted and verified using the accompanying"
                " [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials)."
            )
        ),
    ] = None
    front_side: Optional[PassportFile] = None
    reverse_side: Optional[PassportFile] = None
    selfie: Optional[PassportFile] = None
    translation: Annotated[
        Optional[Sequence[PassportFile]],
        Field(
            description=(
                "*Optional*. Array of encrypted files with translated versions of documents"
                " provided by the user. Available if requested for “passport”, “driver_license”,"
                " “identity_card”, “internal_passport”, “utility_bill”, “bank_statement”,"
                " “rental_agreement”, “passport_registration” and “temporary_registration”"
                " types. Files can be decrypted and verified using the accompanying"
                " [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials)."
            )
        ),
    ] = None
    hash: Annotated[
        StrictStr,
        Field(
            description=(
                "Base64-encoded element hash for using in"
                " [PassportElementErrorUnspecified](https://core.telegram.org/bots/api/#passportelementerrorunspecified)"
            )
        ),
    ]


class EncryptedCredentials(BaseModel):
    """
    Contains data required for decrypting and authenticating [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement). See the [Telegram Passport Documentation](https://core.telegram.org/passport#receiving-information) for a complete description of the data decryption and authentication processes.
    """

    class Config:
        allow_mutation = False

    data: Annotated[
        StrictStr,
        Field(
            description=(
                "Base64-encoded encrypted JSON-serialized data with unique user's payload, data"
                " hashes and secrets required for"
                " [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement)"
                " decryption and authentication"
            )
        ),
    ]
    hash: Annotated[
        StrictStr, Field(description="Base64-encoded data hash for data authentication")
    ]
    secret: Annotated[
        StrictStr,
        Field(
            description=(
                "Base64-encoded secret, encrypted with the bot's public RSA key, required for data"
                " decryption"
            )
        ),
    ]


class Type4(Enum):
    """
    The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”
    """

    personal_details = "personal_details"
    passport = "passport"
    driver_license = "driver_license"
    identity_card = "identity_card"
    internal_passport = "internal_passport"
    address = "address"


class PassportElementErrorDataField(BaseModel):
    """
    Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.
    """

    class Config:
        allow_mutation = False

    source: Annotated[StrictStr, Field(description="Error source, must be *data*")]
    type: Annotated[
        Type4,
        Field(
            description=(
                "The section of the user's Telegram Passport which has the error, one of"
                " “personal_details”, “passport”, “driver_license”, “identity_card”,"
                " “internal_passport”, “address”"
            )
        ),
    ]
    field_name: Annotated[
        StrictStr, Field(description="Name of the data field which has the error")
    ]
    data_hash: Annotated[StrictStr, Field(description="Base64-encoded data hash")]
    message: Annotated[StrictStr, Field(description="Error message")]


class Type5(Enum):
    """
    The section of the user's Telegram Passport which has the issue, one of “passport”, “driver_license”, “identity_card”, “internal_passport”
    """

    passport = "passport"
    driver_license = "driver_license"
    identity_card = "identity_card"
    internal_passport = "internal_passport"


class PassportElementErrorFrontSide(BaseModel):
    """
    Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.
    """

    class Config:
        allow_mutation = False

    source: Annotated[StrictStr, Field(description="Error source, must be *front_side*")]
    type: Annotated[
        Type5,
        Field(
            description=(
                "The section of the user's Telegram Passport which has the issue, one of"
                " “passport”, “driver_license”, “identity_card”, “internal_passport”"
            )
        ),
    ]
    file_hash: Annotated[
        StrictStr,
        Field(description="Base64-encoded hash of the file with the front side of the document"),
    ]
    message: Annotated[StrictStr, Field(description="Error message")]


class Type6(Enum):
    """
    The section of the user's Telegram Passport which has the issue, one of “driver_license”, “identity_card”
    """

    driver_license = "driver_license"
    identity_card = "identity_card"


class PassportElementErrorReverseSide(BaseModel):
    """
    Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.
    """

    class Config:
        allow_mutation = False

    source: Annotated[StrictStr, Field(description="Error source, must be *reverse_side*")]
    type: Annotated[
        Type6,
        Field(
            description=(
                "The section of the user's Telegram Passport which has the issue, one of"
                " “driver_license”, “identity_card”"
            )
        ),
    ]
    file_hash: Annotated[
        StrictStr,
        Field(description="Base64-encoded hash of the file with the reverse side of the document"),
    ]
    message: Annotated[StrictStr, Field(description="Error message")]


class PassportElementErrorSelfie(BaseModel):
    """
    Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.
    """

    class Config:
        allow_mutation = False

    source: Annotated[StrictStr, Field(description="Error source, must be *selfie*")]
    type: Annotated[
        Type5,
        Field(
            description=(
                "The section of the user's Telegram Passport which has the issue, one of"
                " “passport”, “driver_license”, “identity_card”, “internal_passport”"
            )
        ),
    ]
    file_hash: Annotated[
        StrictStr, Field(description="Base64-encoded hash of the file with the selfie")
    ]
    message: Annotated[StrictStr, Field(description="Error message")]


class Type8(Enum):
    """
    The section of the user's Telegram Passport which has the issue, one of “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”
    """

    utility_bill = "utility_bill"
    bank_statement = "bank_statement"
    rental_agreement = "rental_agreement"
    passport_registration = "passport_registration"
    temporary_registration = "temporary_registration"


class PassportElementErrorFile(BaseModel):
    """
    Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.
    """

    class Config:
        allow_mutation = False

    source: Annotated[StrictStr, Field(description="Error source, must be *file*")]
    type: Annotated[
        Type8,
        Field(
            description=(
                "The section of the user's Telegram Passport which has the issue, one of"
                " “utility_bill”, “bank_statement”, “rental_agreement”,"
                " “passport_registration”, “temporary_registration”"
            )
        ),
    ]
    file_hash: Annotated[StrictStr, Field(description="Base64-encoded file hash")]
    message: Annotated[StrictStr, Field(description="Error message")]


class PassportElementErrorFiles(BaseModel):
    """
    Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.
    """

    class Config:
        allow_mutation = False

    source: Annotated[StrictStr, Field(description="Error source, must be *files*")]
    type: Annotated[
        Type8,
        Field(
            description=(
                "The section of the user's Telegram Passport which has the issue, one of"
                " “utility_bill”, “bank_statement”, “rental_agreement”,"
                " “passport_registration”, “temporary_registration”"
            )
        ),
    ]
    file_hashes: Annotated[
        Sequence[StrictStr], Field(description="List of base64-encoded file hashes")
    ]
    message: Annotated[StrictStr, Field(description="Error message")]


class Type10(Enum):
    """
    Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver_license”, “identity_card”, “internal_passport”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”
    """

    passport = "passport"
    driver_license = "driver_license"
    identity_card = "identity_card"
    internal_passport = "internal_passport"
    utility_bill = "utility_bill"
    bank_statement = "bank_statement"
    rental_agreement = "rental_agreement"
    passport_registration = "passport_registration"
    temporary_registration = "temporary_registration"


class PassportElementErrorTranslationFile(BaseModel):
    """
    Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.
    """

    class Config:
        allow_mutation = False

    source: Annotated[StrictStr, Field(description="Error source, must be *translation_file*")]
    type: Annotated[
        Type10,
        Field(
            description=(
                "Type of element of the user's Telegram Passport which has the issue, one of"
                " “passport”, “driver_license”, “identity_card”, “internal_passport”,"
                " “utility_bill”, “bank_statement”, “rental_agreement”,"
                " “passport_registration”, “temporary_registration”"
            )
        ),
    ]
    file_hash: Annotated[StrictStr, Field(description="Base64-encoded file hash")]
    message: Annotated[StrictStr, Field(description="Error message")]


class PassportElementErrorTranslationFiles(BaseModel):
    """
    Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.
    """

    class Config:
        allow_mutation = False

    source: Annotated[StrictStr, Field(description="Error source, must be *translation_files*")]
    type: Annotated[
        Type10,
        Field(
            description=(
                "Type of element of the user's Telegram Passport which has the issue, one of"
                " “passport”, “driver_license”, “identity_card”, “internal_passport”,"
                " “utility_bill”, “bank_statement”, “rental_agreement”,"
                " “passport_registration”, “temporary_registration”"
            )
        ),
    ]
    file_hashes: Annotated[
        Sequence[StrictStr], Field(description="List of base64-encoded file hashes")
    ]
    message: Annotated[StrictStr, Field(description="Error message")]


class PassportElementErrorUnspecified(BaseModel):
    """
    Represents an issue in an unspecified place. The error is considered resolved when new data is added.
    """

    class Config:
        allow_mutation = False

    source: Annotated[StrictStr, Field(description="Error source, must be *unspecified*")]
    type: Annotated[
        StrictStr,
        Field(description="Type of element of the user's Telegram Passport which has the issue"),
    ]
    element_hash: Annotated[StrictStr, Field(description="Base64-encoded element hash")]
    message: Annotated[StrictStr, Field(description="Error message")]


class Game(BaseModel):
    """
    This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
    """

    class Config:
        allow_mutation = False

    title: Annotated[StrictStr, Field(description="Title of the game")]
    description: Annotated[StrictStr, Field(description="Description of the game")]
    photo: Annotated[
        Sequence[PhotoSize],
        Field(description="Photo that will be displayed in the game message in chats."),
    ]
    text: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Brief description of the game or high scores included in the game"
                " message. Can be automatically edited to include current high scores for the game"
                " when the bot calls"
                " [setGameScore](https://core.telegram.org/bots/api/#setgamescore), or manually"
                " edited using"
                " [editMessageText](https://core.telegram.org/bots/api/#editmessagetext). 0-4096"
                " characters."
            )
        ),
    ] = None
    text_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. Special entities that appear in *text*, such as usernames, URLs, bot"
                " commands, etc."
            )
        ),
    ] = None
    animation: Optional[Animation] = None


class CallbackGame(BaseModel):
    class Config:
        allow_mutation = False

    __root__: Annotated[
        Any,
        Field(
            description=(
                "A placeholder, currently holds no information. Use"
                " [BotFather](https://t.me/botfather) to set up your game."
            )
        ),
    ]


class GameHighScore(BaseModel):
    """
    This object represents one row of the high scores table for a game.
    """

    class Config:
        allow_mutation = False

    position: Annotated[StrictInt, Field(description="Position in high score table for the game")]
    user: User
    score: Annotated[StrictInt, Field(description="Score")]


class GetUpdates(BaseModel):
    class Config:
        allow_mutation = False

    offset: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Identifier of the first update to be returned. Must be greater by one than the"
                " highest among the identifiers of previously received updates. By default,"
                " updates starting with the earliest unconfirmed update are returned. An update is"
                " considered confirmed as soon as"
                " [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an"
                " *offset* higher than its *update_id*. The negative offset can be specified to"
                " retrieve updates starting from *-offset* update from the end of the updates"
                " queue. All previous updates will forgotten."
            )
        ),
    ] = None
    limit: Annotated[
        StrictInt,
        Field(
            description=(
                "Limits the number of updates to be retrieved. Values between 1-100 are accepted."
                " Defaults to 100."
            )
        ),
    ] = 100
    timeout: Annotated[
        StrictInt,
        Field(
            description=(
                "Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling."
                " Should be positive, short polling should be used for testing purposes only."
            )
        ),
    ] = 0
    allowed_updates: Annotated[
        Optional[Sequence[StrictStr]],
        Field(
            description=(
                "A JSON-serialized list of the update types you want your bot to receive. For"
                " example, specify [“message”, “edited_channel_post”, “callback_query”] to"
                " only receive updates of these types. See"
                " [Update](https://core.telegram.org/bots/api/#update) for a complete list of"
                " available update types. Specify an empty list to receive all update types except"
                " *chat_member* (default). If not specified, the previous setting will be used. "
                " \n\nPlease note that this parameter doesn't affect updates created before the"
                " call to the getUpdates, so unwanted updates may be received for a short period"
                " of time."
            )
        ),
    ] = None


class SetWebhook(BaseModel):
    class Config:
        allow_mutation = False

    url: Annotated[
        StrictStr,
        Field(
            description=(
                "HTTPS url to send updates to. Use an empty string to remove webhook integration"
            )
        ),
    ]
    certificate: Optional[InputFile] = None
    ip_address: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "The fixed IP address which will be used to send webhook requests instead of the"
                " IP address resolved through DNS"
            )
        ),
    ] = None
    max_connections: Annotated[
        StrictInt,
        Field(
            description=(
                "Maximum allowed number of simultaneous HTTPS connections to the webhook for"
                " update delivery, 1-100. Defaults to *40*. Use lower values to limit the load on"
                " your bot's server, and higher values to increase your bot's throughput."
            )
        ),
    ] = 40
    allowed_updates: Annotated[
        Optional[Sequence[StrictStr]],
        Field(
            description=(
                "A JSON-serialized list of the update types you want your bot to receive. For"
                " example, specify [“message”, “edited_channel_post”, “callback_query”] to"
                " only receive updates of these types. See"
                " [Update](https://core.telegram.org/bots/api/#update) for a complete list of"
                " available update types. Specify an empty list to receive all update types except"
                " *chat_member* (default). If not specified, the previous setting will be used. "
                " \nPlease note that this parameter doesn't affect updates created before the call"
                " to the setWebhook, so unwanted updates may be received for a short period of"
                " time."
            )
        ),
    ] = None
    drop_pending_updates: Annotated[
        Optional[StrictBool], Field(description="Pass *True* to drop all pending updates")
    ] = None


class DeleteWebhook(BaseModel):
    class Config:
        allow_mutation = False

    drop_pending_updates: Annotated[
        Optional[StrictBool], Field(description="Pass *True* to drop all pending updates")
    ] = None


class ForwardMessage(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    from_chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the chat where the original message was sent (or channel"
                " username in the format `@channelusername`)"
            )
        ),
    ]
    disable_notification: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Sends the message"
                " [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will"
                " receive a notification with no sound."
            )
        ),
    ] = None
    protect_content: Annotated[
        Optional[StrictBool],
        Field(
            description="Protects the contents of the forwarded message from forwarding and saving"
        ),
    ] = None
    message_id: Annotated[
        StrictInt,
        Field(description="Message identifier in the chat specified in *from_chat_id*"),
    ]


class Emoji(Enum):
    """
    Emoji on which the dice throw animation is based. Currently, must be one of “🎲”, “🎯”, “🏀”, “⚽”, “🎳”, or “🎰”. Dice can have values 1-6 for “🎲”, “🎯” and “🎳”, values 1-5 for “🏀” and “⚽”, and values 1-64 for “🎰”. Defaults to “🎲”
    """

    dice = "🎲"
    target = "🎯"
    baskball = "🏀"
    football = "⚽"
    bowling = "🎳"
    gambling = "🎰"


class SendChatAction(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    action: Annotated[
        StrictStr,
        Field(
            description=(
                "Type of action to broadcast. Choose one, depending on what the user is about to"
                " receive: *typing* for [text"
                " messages](https://core.telegram.org/bots/api/#sendmessage), *upload_photo* for"
                " [photos](https://core.telegram.org/bots/api/#sendphoto), *record_video* or"
                " *upload_video* for [videos](https://core.telegram.org/bots/api/#sendvideo),"
                " *record_voice* or *upload_voice* for [voice"
                " notes](https://core.telegram.org/bots/api/#sendvoice), *upload_document* for"
                " [general files](https://core.telegram.org/bots/api/#senddocument),"
                " *choose_sticker* for"
                " [stickers](https://core.telegram.org/bots/api/#sendsticker), *find_location*"
                " for [location data](https://core.telegram.org/bots/api/#sendlocation),"
                " *record_video_note* or *upload_video_note* for [video"
                " notes](https://core.telegram.org/bots/api/#sendvideonote)."
            )
        ),
    ]


class GetUserProfilePhotos(BaseModel):
    class Config:
        allow_mutation = False

    user_id: Annotated[StrictInt, Field(description="Unique identifier of the target user")]
    offset: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Sequential number of the first photo to be returned. By default, all photos are"
                " returned."
            )
        ),
    ] = None
    limit: Annotated[
        StrictInt,
        Field(
            description=(
                "Limits the number of photos to be retrieved. Values between 1-100 are accepted."
                " Defaults to 100."
            )
        ),
    ] = 100


class GetFile(BaseModel):
    class Config:
        allow_mutation = False

    file_id: Annotated[StrictStr, Field(description="File identifier to get info about")]


class BanChatMember(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target group or username of the target supergroup or"
                " channel (in the format `@channelusername`)"
            )
        ),
    ]
    user_id: Annotated[StrictInt, Field(description="Unique identifier of the target user")]
    until_date: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Date when the user will be unbanned, unix time. If user is banned for more than"
                " 366 days or less than 30 seconds from the current time they are considered to be"
                " banned forever. Applied for supergroups and channels only."
            )
        ),
    ] = None
    revoke_messages: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True* to delete all messages from the chat for the user that is being"
                " removed. If *False*, the user will be able to see messages in the group that"
                " were sent before the user was removed. Always *True* for supergroups and"
                " channels."
            )
        ),
    ] = None


class UnbanChatMember(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target group or username of the target supergroup or"
                " channel (in the format `@channelusername`)"
            )
        ),
    ]
    user_id: Annotated[StrictInt, Field(description="Unique identifier of the target user")]
    only_if_banned: Annotated[
        Optional[StrictBool], Field(description="Do nothing if the user is not banned")
    ] = None


class RestrictChatMember(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target supergroup (in"
                " the format `@supergroupusername`)"
            )
        ),
    ]
    user_id: Annotated[StrictInt, Field(description="Unique identifier of the target user")]
    permissions: ChatPermissions
    until_date: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Date when restrictions will be lifted for the user, unix time. If user is"
                " restricted for more than 366 days or less than 30 seconds from the current time,"
                " they are considered to be restricted forever"
            )
        ),
    ] = None


class PromoteChatMember(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    user_id: Annotated[StrictInt, Field(description="Unique identifier of the target user")]
    is_anonymous: Annotated[
        Optional[StrictBool],
        Field(description="Pass *True*, if the administrator's presence in the chat is hidden"),
    ] = None
    can_manage_chat: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the administrator can access the chat event log, chat statistics,"
                " message statistics in channels, see channel members, see anonymous"
                " administrators in supergroups and ignore slow mode. Implied by any other"
                " administrator privilege"
            )
        ),
    ] = None
    can_post_messages: Annotated[
        Optional[StrictBool],
        Field(
            description="Pass *True*, if the administrator can create channel posts, channels only"
        ),
    ] = None
    can_edit_messages: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the administrator can edit messages of other users and can pin"
                " messages, channels only"
            )
        ),
    ] = None
    can_delete_messages: Annotated[
        Optional[StrictBool],
        Field(description="Pass *True*, if the administrator can delete messages of other users"),
    ] = None
    can_manage_voice_chats: Annotated[
        Optional[StrictBool],
        Field(description="Pass *True*, if the administrator can manage voice chats"),
    ] = None
    can_restrict_members: Annotated[
        Optional[StrictBool],
        Field(
            description="Pass *True*, if the administrator can restrict, ban or unban chat members"
        ),
    ] = None
    can_promote_members: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the administrator can add new administrators with a subset of"
                " their own privileges or demote administrators that he has promoted, directly or"
                " indirectly (promoted by administrators that were appointed by him)"
            )
        ),
    ] = None
    can_change_info: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the administrator can change chat title, photo and other settings"
            )
        ),
    ] = None
    can_invite_users: Annotated[
        Optional[StrictBool],
        Field(description="Pass *True*, if the administrator can invite new users to the chat"),
    ] = None
    can_pin_messages: Annotated[
        Optional[StrictBool],
        Field(description="Pass *True*, if the administrator can pin messages, supergroups only"),
    ] = None


class SetChatAdministratorCustomTitle(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target supergroup (in"
                " the format `@supergroupusername`)"
            )
        ),
    ]
    user_id: Annotated[StrictInt, Field(description="Unique identifier of the target user")]
    custom_title: Annotated[
        StrictStr,
        Field(
            description=(
                "New custom title for the administrator; 0-16 characters, emoji are not allowed"
            )
        ),
    ]


class BanChatSenderChat(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    sender_chat_id: Annotated[
        StrictInt, Field(description="Unique identifier of the target sender chat")
    ]


class UnbanChatSenderChat(BanChatSenderChat):
    pass


class SetChatPermissions(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target supergroup (in"
                " the format `@supergroupusername`)"
            )
        ),
    ]
    permissions: ChatPermissions


class ExportChatInviteLink(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]


class CreateChatInviteLink(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    name: Annotated[
        Optional[StrictStr], Field(description="Invite link name; 0-32 characters")
    ] = None
    expire_date: Annotated[
        Optional[StrictInt],
        Field(description="Point in time (Unix timestamp) when the link will expire"),
    ] = None
    member_limit: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Maximum number of users that can be members of the chat simultaneously after"
                " joining the chat via this invite link; 1-99999"
            )
        ),
    ] = None
    creates_join_request: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*True*, if users joining the chat via the link need to be approved by chat"
                " administrators. If *True*, *member_limit* can't be specified"
            )
        ),
    ] = None


class EditChatInviteLink(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    invite_link: Annotated[StrictStr, Field(description="The invite link to edit")]
    name: Annotated[
        Optional[StrictStr], Field(description="Invite link name; 0-32 characters")
    ] = None
    expire_date: Annotated[
        Optional[StrictInt],
        Field(description="Point in time (Unix timestamp) when the link will expire"),
    ] = None
    member_limit: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Maximum number of users that can be members of the chat simultaneously after"
                " joining the chat via this invite link; 1-99999"
            )
        ),
    ] = None
    creates_join_request: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*True*, if users joining the chat via the link need to be approved by chat"
                " administrators. If *True*, *member_limit* can't be specified"
            )
        ),
    ] = None


class RevokeChatInviteLink(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier of the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    invite_link: Annotated[StrictStr, Field(description="The invite link to revoke")]


class ApproveChatJoinRequest(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    user_id: Annotated[StrictInt, Field(description="Unique identifier of the target user")]


class DeclineChatJoinRequest(ApproveChatJoinRequest):
    pass


class SetChatPhoto(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    photo: InputFile


class DeleteChatPhoto(ExportChatInviteLink):
    pass


class SetChatTitle(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    title: Annotated[StrictStr, Field(description="New chat title, 1-255 characters")]


class SetChatDescription(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    description: Annotated[
        Optional[StrictStr], Field(description="New chat description, 0-255 characters")
    ] = None


class PinChatMessage(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    message_id: Annotated[StrictInt, Field(description="Identifier of a message to pin")]
    disable_notification: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if it is not necessary to send a notification to all chat members"
                " about the new pinned message. Notifications are always disabled in channels and"
                " private chats."
            )
        ),
    ] = None


class UnpinChatMessage(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    message_id: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Identifier of a message to unpin. If not specified, the most recent pinned"
                " message (by sending date) will be unpinned."
            )
        ),
    ] = None


class UnpinAllChatMessages(ExportChatInviteLink):
    pass


class LeaveChat(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target supergroup or"
                " channel (in the format `@channelusername`)"
            )
        ),
    ]


class GetChat(LeaveChat):
    pass


class GetChatAdministrators(LeaveChat):
    pass


class GetChatMemberCount(LeaveChat):
    pass


class GetChatMember(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target supergroup or"
                " channel (in the format `@channelusername`)"
            )
        ),
    ]
    user_id: Annotated[StrictInt, Field(description="Unique identifier of the target user")]


class SetChatStickerSet(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target supergroup (in"
                " the format `@supergroupusername`)"
            )
        ),
    ]
    sticker_set_name: Annotated[
        StrictStr, Field(description="Name of the sticker set to be set as the group sticker set")
    ]


class DeleteChatStickerSet(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target supergroup (in"
                " the format `@supergroupusername`)"
            )
        ),
    ]


class AnswerCallbackQuery(BaseModel):
    class Config:
        allow_mutation = False

    callback_query_id: Annotated[
        StrictStr, Field(description="Unique identifier for the query to be answered")
    ]
    text: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Text of the notification. If not specified, nothing will be shown to the user,"
                " 0-200 characters"
            )
        ),
    ] = None
    show_alert: Annotated[
        StrictBool,
        Field(
            description=(
                "If *True*, an alert will be shown by the client instead of a notification at the"
                " top of the chat screen. Defaults to *false*."
            )
        ),
    ] = False
    url: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "URL that will be opened by the user's client. If you have created a"
                " [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via"
                " [@Botfather](https://t.me/botfather), specify the URL that opens your game —"
                " note that this will only work if the query comes from a"
                " [*callback_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton)"
                " button.  \n\nOtherwise, you may use links like `t.me/your_bot?start=XXXX` that"
                " open your bot with a parameter."
            )
        ),
    ] = None
    cache_time: Annotated[
        StrictInt,
        Field(
            description=(
                "The maximum amount of time in seconds that the result of the callback query may"
                " be cached client-side. Telegram apps will support caching starting in version"
                " 3.14. Defaults to 0."
            )
        ),
    ] = 0


class DeleteMessage(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    message_id: Annotated[StrictInt, Field(description="Identifier of the message to delete")]


class GetStickerSet(BaseModel):
    class Config:
        allow_mutation = False

    name: Annotated[StrictStr, Field(description="Name of the sticker set")]


class UploadStickerFile(BaseModel):
    class Config:
        allow_mutation = False

    user_id: Annotated[StrictInt, Field(description="User identifier of sticker file owner")]
    png_sticker: InputFile


class CreateNewStickerSet(BaseModel):
    class Config:
        allow_mutation = False

    user_id: Annotated[
        StrictInt, Field(description="User identifier of created sticker set owner")
    ]
    name: Annotated[
        StrictStr,
        Field(
            description=(
                "Short name of sticker set, to be used in `t.me/addstickers/` URLs (e.g.,"
                " *animals*). Can contain only english letters, digits and underscores. Must begin"
                " with a letter, can't contain consecutive underscores and must end in"
                " *“_by_<bot username>”*. *<bot_username>* is case insensitive. 1-64"
                " characters."
            )
        ),
    ]
    title: Annotated[StrictStr, Field(description="Sticker set title, 1-64 characters")]
    png_sticker: Annotated[
        Optional[Union[InputFile, StrictStr]],
        Field(
            description=(
                "**PNG** image with the sticker, must be up to 512 kilobytes in size, dimensions"
                " must not exceed 512px, and either width or height must be exactly 512px. Pass a"
                " *file_id* as a String to send a file that already exists on the Telegram"
                " servers, pass an HTTP URL as a String for Telegram to get a file from the"
                " Internet, or upload a new one using multipart/form-data. [More info on Sending"
                " Files »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ] = None
    tgs_sticker: Optional[InputFile] = None
    webm_sticker: Optional[InputFile] = None
    emojis: Annotated[
        StrictStr, Field(description="One or more emoji corresponding to the sticker")
    ]
    contains_masks: Annotated[
        Optional[StrictBool],
        Field(description="Pass *True*, if a set of mask stickers should be created"),
    ] = None
    mask_position: Optional[MaskPosition] = None


class AddStickerToSet(BaseModel):
    class Config:
        allow_mutation = False

    user_id: Annotated[StrictInt, Field(description="User identifier of sticker set owner")]
    name: Annotated[StrictStr, Field(description="Sticker set name")]
    png_sticker: Annotated[
        Optional[Union[InputFile, StrictStr]],
        Field(
            description=(
                "**PNG** image with the sticker, must be up to 512 kilobytes in size, dimensions"
                " must not exceed 512px, and either width or height must be exactly 512px. Pass a"
                " *file_id* as a String to send a file that already exists on the Telegram"
                " servers, pass an HTTP URL as a String for Telegram to get a file from the"
                " Internet, or upload a new one using multipart/form-data. [More info on Sending"
                " Files »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ] = None
    tgs_sticker: Optional[InputFile] = None
    webm_sticker: Optional[InputFile] = None
    emojis: Annotated[
        StrictStr, Field(description="One or more emoji corresponding to the sticker")
    ]
    mask_position: Optional[MaskPosition] = None


class SetStickerPositionInSet(BaseModel):
    class Config:
        allow_mutation = False

    sticker: Annotated[StrictStr, Field(description="File identifier of the sticker")]
    position: Annotated[
        StrictInt, Field(description="New sticker position in the set, zero-based")
    ]


class DeleteStickerFromSet(BaseModel):
    class Config:
        allow_mutation = False

    sticker: Annotated[StrictStr, Field(description="File identifier of the sticker")]


class SetStickerSetThumb(BaseModel):
    class Config:
        allow_mutation = False

    name: Annotated[StrictStr, Field(description="Sticker set name")]
    user_id: Annotated[StrictInt, Field(description="User identifier of the sticker set owner")]
    thumb: Annotated[
        Optional[Union[InputFile, StrictStr]],
        Field(
            description=(
                "A **PNG** image with the thumbnail, must be up to 128 kilobytes in size and have"
                " width and height exactly 100px, or a **TGS** animation with the thumbnail up to"
                " 32 kilobytes in size; see"
                " [https://core.telegram.org/stickers#animated-sticker-requirements](https://core.telegram.org/stickers#animated-sticker-requirements)"
                " for animated sticker technical requirements, or a **WEBM** video with the"
                " thumbnail up to 32 kilobytes in size; see"
                " [https://core.telegram.org/stickers#video-sticker-requirements](https://core.telegram.org/stickers#video-sticker-requirements)"
                " for video sticker technical requirements. Pass a *file_id* as a String to send"
                " a file that already exists on the Telegram servers, pass an HTTP URL as a String"
                " for Telegram to get a file from the Internet, or upload a new one using"
                " multipart/form-data. [More info on Sending Files"
                " »](https://core.telegram.org/bots/api/#sending-files). Animated sticker set"
                " thumbnails can't be uploaded via HTTP URL."
            )
        ),
    ] = None


class AnswerShippingQuery(BaseModel):
    class Config:
        allow_mutation = False

    shipping_query_id: Annotated[
        StrictStr, Field(description="Unique identifier for the query to be answered")
    ]
    ok: Annotated[
        StrictBool,
        Field(
            description=(
                "Specify *True* if delivery to the specified address is possible and False if"
                " there are any problems (for example, if delivery to the specified address is not"
                " possible)"
            )
        ),
    ]
    shipping_options: Annotated[
        Optional[Sequence[ShippingOption]],
        Field(
            description=(
                "Required if *ok* is *True*. A JSON-serialized array of available shipping"
                " options."
            )
        ),
    ] = None
    error_message: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Required if *ok* is False. Error message in human readable form that explains why"
                ' it is impossible to complete the order (e.g. "Sorry, delivery to your desired'
                " address is unavailable'). Telegram will display this message to the user."
            )
        ),
    ] = None


class AnswerPreCheckoutQuery(BaseModel):
    class Config:
        allow_mutation = False

    pre_checkout_query_id: Annotated[
        StrictStr, Field(description="Unique identifier for the query to be answered")
    ]
    ok: Annotated[
        StrictBool,
        Field(
            description=(
                "Specify *True* if everything is alright (goods are available, etc.) and the bot"
                " is ready to proceed with the order. Use *False* if there are any problems."
            )
        ),
    ]
    error_message: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Required if *ok* is *False*. Error message in human readable form that explains"
                ' the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just'
                " bought the last of our amazing black T-shirts while you were busy filling out"
                ' your payment details. Please choose a different color or garment!"). Telegram'
                " will display this message to the user."
            )
        ),
    ] = None


class SetGameScore(BaseModel):
    class Config:
        allow_mutation = False

    user_id: Annotated[StrictInt, Field(description="User identifier")]
    score: Annotated[StrictInt, Field(description="New score, must be non-negative")]
    force: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the high score is allowed to decrease. This can be useful when"
                " fixing mistakes or banning cheaters"
            )
        ),
    ] = None
    disable_edit_message: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the game message should not be automatically edited to include"
                " the current scoreboard"
            )
        ),
    ] = None
    chat_id: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Required if *inline_message_id* is not specified. Unique identifier for the"
                " target chat"
            )
        ),
    ] = None
    message_id: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Required if *inline_message_id* is not specified. Identifier of the sent"
                " message"
            )
        ),
    ] = None
    inline_message_id: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Required if *chat_id* and *message_id* are not specified. Identifier of the"
                " inline message"
            )
        ),
    ] = None


class GetGameHighScores(BaseModel):
    class Config:
        allow_mutation = False

    user_id: Annotated[StrictInt, Field(description="Target user id")]
    chat_id: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Required if *inline_message_id* is not specified. Unique identifier for the"
                " target chat"
            )
        ),
    ] = None
    message_id: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Required if *inline_message_id* is not specified. Identifier of the sent"
                " message"
            )
        ),
    ] = None
    inline_message_id: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Required if *chat_id* and *message_id* are not specified. Identifier of the"
                " inline message"
            )
        ),
    ] = None


class Error(BaseModel):
    class Config:
        allow_mutation = False

    ok: StrictBool
    error_code: StrictInt
    description: StrictStr
    parameters: Optional[ResponseParameters] = None


class KeyboardButton(BaseModel):
    """
    This object represents one button of the reply keyboard. For simple text buttons *String* can be used instead of this object to specify text of the button. Optional fields *request_contact*, *request_location*, and *request_poll* are mutually exclusive.
    """

    class Config:
        allow_mutation = False

    text: Annotated[
        StrictStr,
        Field(
            description=(
                "Text of the button. If none of the optional fields are used, it will be sent as a"
                " message when the button is pressed"
            )
        ),
    ]
    request_contact: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. If *True*, the user's phone number will be sent as a contact when the"
                " button is pressed. Available in private chats only"
            )
        ),
    ] = None
    request_location: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. If *True*, the user's current location will be sent when the button"
                " is pressed. Available in private chats only"
            )
        ),
    ] = None
    request_poll: Optional[KeyboardButtonPollType] = None


class InlineKeyboardButton(BaseModel):
    """
    This object represents one button of an inline keyboard. You **must** use exactly one of the optional fields.
    """

    class Config:
        allow_mutation = False

    text: Annotated[StrictStr, Field(description="Label text on the button")]
    url: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. HTTP or tg:// url to be opened when the button is pressed. Links"
                " `tg://user?id=<user_id>` can be used to mention a user by their ID without using"
                " a username, if this is allowed by their privacy settings."
            )
        ),
    ] = None
    login_url: Optional[LoginUrl] = None
    callback_data: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Data to be sent in a [callback"
                " query](https://core.telegram.org/bots/api/#callbackquery) to the bot when button"
                " is pressed, 1-64 bytes"
            )
        ),
    ] = None
    switch_inline_query: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. If set, pressing the button will prompt the user to select one of"
                " their chats, open that chat and insert the bot's username and the specified"
                " inline query in the input field. Can be empty, in which case just the bot's"
                " username will be inserted.  \n\n**Note:** This offers an easy way for users to"
                " start using your bot in [inline mode](/bots/inline) when they are currently in a"
                " private chat with it. Especially useful when combined with"
                " [*switch_pm…*](https://core.telegram.org/bots/api/#answerinlinequery) actions"
                " – in this case the user will be automatically returned to the chat they switched"
                " from, skipping the chat selection screen."
            )
        ),
    ] = None
    switch_inline_query_current_chat: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. If set, pressing the button will insert the bot's username and the"
                " specified inline query in the current chat's input field. Can be empty, in which"
                " case only the bot's username will be inserted.  \n\nThis offers a quick way for"
                " the user to open your bot in inline mode in the same chat – good for selecting"
                " something from multiple options."
            )
        ),
    ] = None
    callback_game: Optional[CallbackGame] = None
    pay: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. Specify *True*, to send a [Pay"
                " button](https://core.telegram.org/bots/api/#payments).  \n\n**NOTE:** This type"
                " of button **must** always be the first button in the first row and can only be"
                " used in invoice messages."
            )
        ),
    ] = None


class ChatMember(BaseModel):
    class Config:
        allow_mutation = False

    __root__: Annotated[
        Union[
            ChatMemberOwner,
            ChatMemberAdministrator,
            ChatMemberMember,
            ChatMemberRestricted,
            ChatMemberLeft,
            ChatMemberBanned,
        ],
        Field(
            description=(
                "This object contains information about one member of a chat. Currently, the"
                " following 6 types of chat members are supported:"
            )
        ),
    ]


class BotCommandScope(BaseModel):
    class Config:
        allow_mutation = False

    __root__: Annotated[
        Union[
            BotCommandScopeDefault,
            BotCommandScopeAllPrivateChats,
            BotCommandScopeAllGroupChats,
            BotCommandScopeAllChatAdministrators,
            BotCommandScopeChat,
            BotCommandScopeChatAdministrators,
            BotCommandScopeChatMember,
        ],
        Field(
            description=(
                "This object represents the scope to which bot commands are applied. Currently,"
                " the following 7 scopes are supported:"
            )
        ),
    ]


class InputMediaVideo(BaseModel):
    """
    Represents a video to be sent.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *video*")]
    media: Annotated[
        StrictStr,
        Field(
            description=(
                "File to send. Pass a file_id to send a file that exists on the Telegram servers"
                " (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or"
                " pass “attach://<file_attach_name>” to upload a new one using"
                " multipart/form-data under <file_attach_name> name. [More info on Sending"
                " Files »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ]
    thumb: Annotated[
        Optional[Union[InputFile, StrictStr]],
        Field(
            description=(
                "*Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation"
                " for the file is supported server-side. The thumbnail should be in JPEG format"
                " and less than 200 kB in size. A thumbnail's width and height should not exceed"
                " 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails"
                " can't be reused and can be only uploaded as a new file, so you can pass"
                " “attach://<file_attach_name>” if the thumbnail was uploaded using"
                " multipart/form-data under <file_attach_name>. [More info on Sending Files"
                " »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ] = None
    caption: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Caption of the video to be sent, 0-1024 characters after entities"
                " parsing"
            )
        ),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Mode for parsing entities in the video caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. List of special entities that appear in the caption, which can be"
                " specified instead of *parse_mode*"
            )
        ),
    ] = None
    width: Annotated[Optional[StrictInt], Field(description="*Optional*. Video width")] = None
    height: Annotated[Optional[StrictInt], Field(description="*Optional*. Video height")] = None
    duration: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Video duration in seconds")
    ] = None
    supports_streaming: Annotated[
        Optional[StrictBool],
        Field(
            description="*Optional*. Pass *True*, if the uploaded video is suitable for streaming"
        ),
    ] = None


class InputMediaAnimation(BaseModel):
    """
    Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *animation*")]
    media: Annotated[
        StrictStr,
        Field(
            description=(
                "File to send. Pass a file_id to send a file that exists on the Telegram servers"
                " (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or"
                " pass “attach://<file_attach_name>” to upload a new one using"
                " multipart/form-data under <file_attach_name> name. [More info on Sending"
                " Files »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ]
    thumb: Annotated[
        Optional[Union[InputFile, StrictStr]],
        Field(
            description=(
                "*Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation"
                " for the file is supported server-side. The thumbnail should be in JPEG format"
                " and less than 200 kB in size. A thumbnail's width and height should not exceed"
                " 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails"
                " can't be reused and can be only uploaded as a new file, so you can pass"
                " “attach://<file_attach_name>” if the thumbnail was uploaded using"
                " multipart/form-data under <file_attach_name>. [More info on Sending Files"
                " »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ] = None
    caption: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Caption of the animation to be sent, 0-1024 characters after entities"
                " parsing"
            )
        ),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Mode for parsing entities in the animation caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. List of special entities that appear in the caption, which can be"
                " specified instead of *parse_mode*"
            )
        ),
    ] = None
    width: Annotated[Optional[StrictInt], Field(description="*Optional*. Animation width")] = None
    height: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Animation height")
    ] = None
    duration: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Animation duration in seconds")
    ] = None


class InputMediaAudio(BaseModel):
    """
    Represents an audio file to be treated as music to be sent.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *audio*")]
    media: Annotated[
        StrictStr,
        Field(
            description=(
                "File to send. Pass a file_id to send a file that exists on the Telegram servers"
                " (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or"
                " pass “attach://<file_attach_name>” to upload a new one using"
                " multipart/form-data under <file_attach_name> name. [More info on Sending"
                " Files »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ]
    thumb: Annotated[
        Optional[Union[InputFile, StrictStr]],
        Field(
            description=(
                "*Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation"
                " for the file is supported server-side. The thumbnail should be in JPEG format"
                " and less than 200 kB in size. A thumbnail's width and height should not exceed"
                " 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails"
                " can't be reused and can be only uploaded as a new file, so you can pass"
                " “attach://<file_attach_name>” if the thumbnail was uploaded using"
                " multipart/form-data under <file_attach_name>. [More info on Sending Files"
                " »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ] = None
    caption: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Caption of the audio to be sent, 0-1024 characters after entities"
                " parsing"
            )
        ),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Mode for parsing entities in the audio caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. List of special entities that appear in the caption, which can be"
                " specified instead of *parse_mode*"
            )
        ),
    ] = None
    duration: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Duration of the audio in seconds")
    ] = None
    performer: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Performer of the audio")
    ] = None
    title: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Title of the audio")
    ] = None


class InputMediaDocument(BaseModel):
    """
    Represents a general file to be sent.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *document*")]
    media: Annotated[
        StrictStr,
        Field(
            description=(
                "File to send. Pass a file_id to send a file that exists on the Telegram servers"
                " (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or"
                " pass “attach://<file_attach_name>” to upload a new one using"
                " multipart/form-data under <file_attach_name> name. [More info on Sending"
                " Files »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ]
    thumb: Annotated[
        Optional[Union[InputFile, StrictStr]],
        Field(
            description=(
                "*Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation"
                " for the file is supported server-side. The thumbnail should be in JPEG format"
                " and less than 200 kB in size. A thumbnail's width and height should not exceed"
                " 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails"
                " can't be reused and can be only uploaded as a new file, so you can pass"
                " “attach://<file_attach_name>” if the thumbnail was uploaded using"
                " multipart/form-data under <file_attach_name>. [More info on Sending Files"
                " »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ] = None
    caption: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Caption of the document to be sent, 0-1024 characters after entities"
                " parsing"
            )
        ),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Mode for parsing entities in the document caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. List of special entities that appear in the caption, which can be"
                " specified instead of *parse_mode*"
            )
        ),
    ] = None
    disable_content_type_detection: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. Disables automatic server-side content type detection for files"
                " uploaded using multipart/form-data. Always *True*, if the document is sent as"
                " part of an album."
            )
        ),
    ] = None


class Sticker(BaseModel):
    """
    This object represents a sticker.
    """

    class Config:
        allow_mutation = False

    file_id: Annotated[
        StrictStr,
        Field(
            description="Identifier for this file, which can be used to download or reuse the file"
        ),
    ]
    file_unique_id: Annotated[
        StrictStr,
        Field(
            description=(
                "Unique identifier for this file, which is supposed to be the same over time and"
                " for different bots. Can't be used to download or reuse the file."
            )
        ),
    ]
    width: Annotated[StrictInt, Field(description="Sticker width")]
    height: Annotated[StrictInt, Field(description="Sticker height")]
    is_animated: Annotated[
        StrictBool,
        Field(
            description=(
                "*True*, if the sticker is [animated](https://telegram.org/blog/animated-stickers)"
            )
        ),
    ]
    is_video: Annotated[
        StrictBool,
        Field(
            description=(
                "*True*, if the sticker is a [video"
                " sticker](https://telegram.org/blog/video-stickers-better-reactions)"
            )
        ),
    ]
    thumb: Optional[PhotoSize] = None
    emoji: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Emoji associated with the sticker")
    ] = None
    set_name: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. Name of the sticker set to which the sticker belongs"),
    ] = None
    mask_position: Optional[MaskPosition] = None
    file_size: Annotated[
        Optional[StrictInt], Field(description="*Optional*. File size in bytes")
    ] = None


class StickerSet(BaseModel):
    """
    This object represents a sticker set.
    """

    class Config:
        allow_mutation = False

    name: Annotated[StrictStr, Field(description="Sticker set name")]
    title: Annotated[StrictStr, Field(description="Sticker set title")]
    is_animated: Annotated[
        StrictBool,
        Field(
            description=(
                "*True*, if the sticker set contains [animated"
                " stickers](https://telegram.org/blog/animated-stickers)"
            )
        ),
    ]
    is_video: Annotated[
        StrictBool,
        Field(
            description=(
                "*True*, if the sticker set contains [video"
                " stickers](https://telegram.org/blog/video-stickers-better-reactions)"
            )
        ),
    ]
    contains_masks: Annotated[
        StrictBool, Field(description="*True*, if the sticker set contains masks")
    ]
    stickers: Annotated[Sequence[Sticker], Field(description="List of all set stickers")]
    thumb: Optional[PhotoSize] = None


class InputInvoiceMessageContent(BaseModel):
    """
    Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of an invoice message to be sent as the result of an inline query.
    """

    class Config:
        allow_mutation = False

    title: Annotated[StrictStr, Field(description="Product name, 1-32 characters")]
    description: Annotated[StrictStr, Field(description="Product description, 1-255 characters")]
    payload: Annotated[
        StrictStr,
        Field(
            description=(
                "Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user,"
                " use for your internal processes."
            )
        ),
    ]
    provider_token: Annotated[
        StrictStr,
        Field(
            description="Payment provider token, obtained via [Botfather](https://t.me/botfather)"
        ),
    ]
    currency: Annotated[
        StrictStr,
        Field(
            description=(
                "Three-letter ISO 4217 currency code, see [more on"
                " currencies](/bots/payments#supported-currencies)"
            )
        ),
    ]
    prices: Annotated[
        Sequence[LabeledPrice],
        Field(
            description=(
                "Price breakdown, a JSON-serialized list of components (e.g. product price, tax,"
                " discount, delivery cost, delivery tax, bonus, etc.)"
            )
        ),
    ]
    max_tip_amount: Annotated[
        StrictInt,
        Field(
            description=(
                "*Optional*. The maximum accepted amount for tips in the *smallest units* of the"
                " currency (integer, **not** float/double). For example, for a maximum tip of `US$"
                " 1.45` pass `max_tip_amount = 145`. See the *exp* parameter in"
                " [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it"
                " shows the number of digits past the decimal point for each currency (2 for the"
                " majority of currencies). Defaults to 0"
            )
        ),
    ] = 0
    suggested_tip_amounts: Annotated[
        Optional[Sequence[StrictInt]],
        Field(
            description=(
                "*Optional*. A JSON-serialized array of suggested amounts of tip in the *smallest"
                " units* of the currency (integer, **not** float/double). At most 4 suggested tip"
                " amounts can be specified. The suggested tip amounts must be positive, passed in"
                " a strictly increased order and must not exceed *max_tip_amount*."
            )
        ),
    ] = None
    provider_data: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. A JSON-serialized object for data about the invoice, which will be"
                " shared with the payment provider. A detailed description of the required fields"
                " should be provided by the payment provider."
            )
        ),
    ] = None
    photo_url: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. URL of the product photo for the invoice. Can be a photo of the goods"
                " or a marketing image for a service. People like it better when they see what"
                " they are paying for."
            )
        ),
    ] = None
    photo_size: Annotated[Optional[StrictInt], Field(description="*Optional*. Photo size")] = None
    photo_width: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Photo width")
    ] = None
    photo_height: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Photo height")
    ] = None
    need_name: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. Pass *True*, if you require the user's full name to complete the"
                " order"
            )
        ),
    ] = None
    need_phone_number: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. Pass *True*, if you require the user's phone number to complete the"
                " order"
            )
        ),
    ] = None
    need_email: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. Pass *True*, if you require the user's email address to complete the"
                " order"
            )
        ),
    ] = None
    need_shipping_address: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. Pass *True*, if you require the user's shipping address to complete"
                " the order"
            )
        ),
    ] = None
    send_phone_number_to_provider: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. Pass *True*, if user's phone number should be sent to provider"
            )
        ),
    ] = None
    send_email_to_provider: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. Pass *True*, if user's email address should be sent to provider"
            )
        ),
    ] = None
    is_flexible: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. Pass *True*, if the final price depends on the shipping method"
            )
        ),
    ] = None


class PassportData(BaseModel):
    """
    Contains information about Telegram Passport data shared with the bot by the user.
    """

    class Config:
        allow_mutation = False

    data: Annotated[
        Sequence[EncryptedPassportElement],
        Field(
            description=(
                "Array with information about documents and other Telegram Passport elements that"
                " was shared with the bot"
            )
        ),
    ]
    credentials: EncryptedCredentials


class PassportElementError(BaseModel):
    class Config:
        allow_mutation = False

    __root__: Annotated[
        Union[
            PassportElementErrorDataField,
            PassportElementErrorFrontSide,
            PassportElementErrorReverseSide,
            PassportElementErrorSelfie,
            PassportElementErrorFile,
            PassportElementErrorFiles,
            PassportElementErrorTranslationFile,
            PassportElementErrorTranslationFiles,
            PassportElementErrorUnspecified,
        ],
        Field(
            description=(
                "This object represents an error in the Telegram Passport element which was"
                " submitted that should be resolved by the user. It should be one of:"
            )
        ),
    ]


class SendMediaGroup(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    media: Annotated[
        Sequence[Union[InputMediaAudio, InputMediaDocument, InputMediaPhoto, InputMediaVideo]],
        Field(
            description=(
                "A JSON-serialized array describing messages to be sent, must include 2-10 items"
            )
        ),
    ]
    disable_notification: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Sends messages"
                " [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will"
                " receive a notification with no sound."
            )
        ),
    ] = None
    protect_content: Annotated[
        Optional[StrictBool],
        Field(description="Protects the contents of the sent messages from forwarding and saving"),
    ] = None
    reply_to_message_id: Annotated[
        Optional[StrictInt],
        Field(description="If the messages are a reply, ID of the original message"),
    ] = None
    allow_sending_without_reply: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the message should be sent even if the specified replied-to"
                " message is not found"
            )
        ),
    ] = None


class SetMyCommands(BaseModel):
    class Config:
        allow_mutation = False

    commands: Annotated[
        Sequence[BotCommand],
        Field(
            description=(
                "A JSON-serialized list of bot commands to be set as the list of the bot's"
                " commands. At most 100 commands can be specified."
            )
        ),
    ]
    scope: Optional[BotCommandScope] = None
    language_code: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "A two-letter ISO 639-1 language code. If empty, commands will be applied to all"
                " users from the given scope, for whose language there are no dedicated commands"
            )
        ),
    ] = None


class DeleteMyCommands(BaseModel):
    class Config:
        allow_mutation = False

    scope: Optional[BotCommandScope] = None
    language_code: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "A two-letter ISO 639-1 language code. If empty, commands will be applied to all"
                " users from the given scope, for whose language there are no dedicated commands"
            )
        ),
    ] = None


class GetMyCommands(BaseModel):
    class Config:
        allow_mutation = False

    scope: Optional[BotCommandScope] = None
    language_code: Annotated[
        Optional[StrictStr],
        Field(description="A two-letter ISO 639-1 language code or an empty string"),
    ] = None


class SetPassportDataErrors(BaseModel):
    class Config:
        allow_mutation = False

    user_id: Annotated[StrictInt, Field(description="User identifier")]
    errors: Annotated[
        Sequence[PassportElementError],
        Field(description="A JSON-serialized array describing the errors"),
    ]


class ReplyKeyboardMarkup(BaseModel):
    """
    This object represents a [custom keyboard](https://core.telegram.org/bots#keyboards) with reply options (see [Introduction to bots](https://core.telegram.org/bots#keyboards) for details and examples).
    """

    class Config:
        allow_mutation = False

    keyboard: Annotated[
        Sequence[Sequence[KeyboardButton]],
        Field(
            description=(
                "Array of button rows, each represented by an Array of"
                " [KeyboardButton](https://core.telegram.org/bots/api/#keyboardbutton) objects"
            )
        ),
    ]
    resize_keyboard: Annotated[
        StrictBool,
        Field(
            description=(
                "*Optional*. Requests clients to resize the keyboard vertically for optimal fit"
                " (e.g., make the keyboard smaller if there are just two rows of buttons)."
                " Defaults to *false*, in which case the custom keyboard is always of the same"
                " height as the app's standard keyboard."
            )
        ),
    ] = False
    one_time_keyboard: Annotated[
        StrictBool,
        Field(
            description=(
                "*Optional*. Requests clients to hide the keyboard as soon as it's been used. The"
                " keyboard will still be available, but clients will automatically display the"
                " usual letter-keyboard in the chat – the user can press a special button in the"
                " input field to see the custom keyboard again. Defaults to *false*."
            )
        ),
    ] = False
    input_field_placeholder: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. The placeholder to be shown in the input field when the keyboard is"
                " active; 1-64 characters"
            )
        ),
    ] = None
    selective: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. Use this parameter if you want to show the keyboard to specific users"
                " only. Targets: 1) users that are @mentioned in the *text* of the"
                " [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's"
                " message is a reply (has *reply_to_message_id*), sender of the original"
                " message.  \n\n*Example:* A user requests to change the bot's language, bot"
                " replies to the request with a keyboard to select the new language. Other users"
                " in the group don't see the keyboard."
            )
        ),
    ] = None


class InlineKeyboardMarkup(BaseModel):
    """
    This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    """

    class Config:
        allow_mutation = False

    inline_keyboard: Annotated[
        Sequence[Sequence[InlineKeyboardButton]],
        Field(
            description=(
                "Array of button rows, each represented by an Array of"
                " [InlineKeyboardButton](https://core.telegram.org/bots/api/#inlinekeyboardbutton)"
                " objects"
            )
        ),
    ]


class InputMedia(BaseModel):
    class Config:
        allow_mutation = False

    __root__: Annotated[
        Union[
            InputMediaAnimation,
            InputMediaDocument,
            InputMediaAudio,
            InputMediaPhoto,
            InputMediaVideo,
        ],
        Field(
            description=(
                "This object represents the content of a media message to be sent. It should be"
                " one of"
            )
        ),
    ]


class InlineQueryResultGame(BaseModel):
    """
    Represents a [Game](https://core.telegram.org/bots/api/#games).
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *game*")]
    id: Annotated[StrictStr, Field(description="Unique identifier for this result, 1-64 bytes")]
    game_short_name: Annotated[StrictStr, Field(description="Short name of the game")]
    reply_markup: Optional[InlineKeyboardMarkup] = None


class InputMessageContent(BaseModel):
    class Config:
        allow_mutation = False

    __root__: Annotated[
        Union[
            InputTextMessageContent,
            InputLocationMessageContent,
            InputVenueMessageContent,
            InputContactMessageContent,
            InputInvoiceMessageContent,
        ],
        Field(
            description=(
                "This object represents the content of a message to be sent as a result of an"
                " inline query. Telegram clients currently support the following 5 types:"
            )
        ),
    ]


class SendMessage(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    text: Annotated[
        StrictStr,
        Field(
            description="Text of the message to be sent, 1-4096 characters after entities parsing"
        ),
    ]
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Mode for parsing entities in the message text. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "A JSON-serialized list of special entities that appear in message text, which can"
                " be specified instead of *parse_mode*"
            )
        ),
    ] = None
    disable_web_page_preview: Annotated[
        Optional[StrictBool], Field(description="Disables link previews for links in this message")
    ] = None
    disable_notification: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Sends the message"
                " [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will"
                " receive a notification with no sound."
            )
        ),
    ] = None
    protect_content: Annotated[
        Optional[StrictBool],
        Field(description="Protects the contents of the sent message from forwarding and saving"),
    ] = None
    reply_to_message_id: Annotated[
        Optional[StrictInt],
        Field(description="If the message is a reply, ID of the original message"),
    ] = None
    allow_sending_without_reply: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the message should be sent even if the specified replied-to"
                " message is not found"
            )
        ),
    ] = None
    reply_markup: Annotated[
        Optional[
            Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]
        ],
        Field(
            description=(
                "Additional interface options. A JSON-serialized object for an [inline"
                " keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating),"
                " [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions"
                " to remove reply keyboard or to force a reply from the user."
            )
        ),
    ] = None


class CopyMessage(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    from_chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the chat where the original message was sent (or channel"
                " username in the format `@channelusername`)"
            )
        ),
    ]
    message_id: Annotated[
        StrictInt,
        Field(description="Message identifier in the chat specified in *from_chat_id*"),
    ]
    caption: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "New caption for media, 0-1024 characters after entities parsing. If not"
                " specified, the original caption is kept"
            )
        ),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Mode for parsing entities in the new caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "A JSON-serialized list of special entities that appear in the new caption, which"
                " can be specified instead of *parse_mode*"
            )
        ),
    ] = None
    disable_notification: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Sends the message"
                " [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will"
                " receive a notification with no sound."
            )
        ),
    ] = None
    protect_content: Annotated[
        Optional[StrictBool],
        Field(description="Protects the contents of the sent message from forwarding and saving"),
    ] = None
    reply_to_message_id: Annotated[
        Optional[StrictInt],
        Field(description="If the message is a reply, ID of the original message"),
    ] = None
    allow_sending_without_reply: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the message should be sent even if the specified replied-to"
                " message is not found"
            )
        ),
    ] = None
    reply_markup: Annotated[
        Optional[
            Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]
        ],
        Field(
            description=(
                "Additional interface options. A JSON-serialized object for an [inline"
                " keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating),"
                " [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions"
                " to remove reply keyboard or to force a reply from the user."
            )
        ),
    ] = None


class SendPhoto(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    photo: Annotated[
        Union[InputFile, StrictStr],
        Field(
            description=(
                "Photo to send. Pass a file_id as String to send a photo that exists on the"
                " Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get"
                " a photo from the Internet, or upload a new photo using multipart/form-data. The"
                " photo must be at most 10 MB in size. The photo's width and height must not"
                " exceed 10000 in total. Width and height ratio must be at most 20. [More info on"
                " Sending Files »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ]
    caption: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Photo caption (may also be used when resending photos by *file_id*), 0-1024"
                " characters after entities parsing"
            )
        ),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Mode for parsing entities in the photo caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "A JSON-serialized list of special entities that appear in the caption, which can"
                " be specified instead of *parse_mode*"
            )
        ),
    ] = None
    disable_notification: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Sends the message"
                " [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will"
                " receive a notification with no sound."
            )
        ),
    ] = None
    protect_content: Annotated[
        Optional[StrictBool],
        Field(description="Protects the contents of the sent message from forwarding and saving"),
    ] = None
    reply_to_message_id: Annotated[
        Optional[StrictInt],
        Field(description="If the message is a reply, ID of the original message"),
    ] = None
    allow_sending_without_reply: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the message should be sent even if the specified replied-to"
                " message is not found"
            )
        ),
    ] = None
    reply_markup: Annotated[
        Optional[
            Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]
        ],
        Field(
            description=(
                "Additional interface options. A JSON-serialized object for an [inline"
                " keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating),"
                " [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions"
                " to remove reply keyboard or to force a reply from the user."
            )
        ),
    ] = None


class SendAudio(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    audio: Annotated[
        Union[InputFile, StrictStr],
        Field(
            description=(
                "Audio file to send. Pass a file_id as String to send an audio file that exists"
                " on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram"
                " to get an audio file from the Internet, or upload a new one using"
                " multipart/form-data. [More info on Sending Files"
                " »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ]
    caption: Annotated[
        Optional[StrictStr],
        Field(description="Audio caption, 0-1024 characters after entities parsing"),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Mode for parsing entities in the audio caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "A JSON-serialized list of special entities that appear in the caption, which can"
                " be specified instead of *parse_mode*"
            )
        ),
    ] = None
    duration: Annotated[
        Optional[StrictInt], Field(description="Duration of the audio in seconds")
    ] = None
    performer: Annotated[Optional[StrictStr], Field(description="Performer")] = None
    title: Annotated[Optional[StrictStr], Field(description="Track name")] = None
    thumb: Annotated[
        Optional[Union[InputFile, StrictStr]],
        Field(
            description=(
                "Thumbnail of the file sent; can be ignored if thumbnail generation for the file"
                " is supported server-side. The thumbnail should be in JPEG format and less than"
                " 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if"
                " the file is not uploaded using multipart/form-data. Thumbnails can't be reused"
                " and can be only uploaded as a new file, so you can pass"
                " “attach://<file_attach_name>” if the thumbnail was uploaded using"
                " multipart/form-data under <file_attach_name>. [More info on Sending Files"
                " »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ] = None
    disable_notification: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Sends the message"
                " [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will"
                " receive a notification with no sound."
            )
        ),
    ] = None
    protect_content: Annotated[
        Optional[StrictBool],
        Field(description="Protects the contents of the sent message from forwarding and saving"),
    ] = None
    reply_to_message_id: Annotated[
        Optional[StrictInt],
        Field(description="If the message is a reply, ID of the original message"),
    ] = None
    allow_sending_without_reply: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the message should be sent even if the specified replied-to"
                " message is not found"
            )
        ),
    ] = None
    reply_markup: Annotated[
        Optional[
            Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]
        ],
        Field(
            description=(
                "Additional interface options. A JSON-serialized object for an [inline"
                " keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating),"
                " [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions"
                " to remove reply keyboard or to force a reply from the user."
            )
        ),
    ] = None


class SendDocument(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    document: Annotated[
        Union[InputFile, StrictStr],
        Field(
            description=(
                "File to send. Pass a file_id as String to send a file that exists on the"
                " Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get"
                " a file from the Internet, or upload a new one using multipart/form-data. [More"
                " info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ]
    thumb: Annotated[
        Optional[Union[InputFile, StrictStr]],
        Field(
            description=(
                "Thumbnail of the file sent; can be ignored if thumbnail generation for the file"
                " is supported server-side. The thumbnail should be in JPEG format and less than"
                " 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if"
                " the file is not uploaded using multipart/form-data. Thumbnails can't be reused"
                " and can be only uploaded as a new file, so you can pass"
                " “attach://<file_attach_name>” if the thumbnail was uploaded using"
                " multipart/form-data under <file_attach_name>. [More info on Sending Files"
                " »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ] = None
    caption: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Document caption (may also be used when resending documents by *file_id*),"
                " 0-1024 characters after entities parsing"
            )
        ),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Mode for parsing entities in the document caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "A JSON-serialized list of special entities that appear in the caption, which can"
                " be specified instead of *parse_mode*"
            )
        ),
    ] = None
    disable_content_type_detection: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Disables automatic server-side content type detection for files uploaded using"
                " multipart/form-data"
            )
        ),
    ] = None
    disable_notification: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Sends the message"
                " [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will"
                " receive a notification with no sound."
            )
        ),
    ] = None
    protect_content: Annotated[
        Optional[StrictBool],
        Field(description="Protects the contents of the sent message from forwarding and saving"),
    ] = None
    reply_to_message_id: Annotated[
        Optional[StrictInt],
        Field(description="If the message is a reply, ID of the original message"),
    ] = None
    allow_sending_without_reply: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the message should be sent even if the specified replied-to"
                " message is not found"
            )
        ),
    ] = None
    reply_markup: Annotated[
        Optional[
            Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]
        ],
        Field(
            description=(
                "Additional interface options. A JSON-serialized object for an [inline"
                " keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating),"
                " [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions"
                " to remove reply keyboard or to force a reply from the user."
            )
        ),
    ] = None


class SendVideo(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    video: Annotated[
        Union[InputFile, StrictStr],
        Field(
            description=(
                "Video to send. Pass a file_id as String to send a video that exists on the"
                " Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get"
                " a video from the Internet, or upload a new video using multipart/form-data."
                " [More info on Sending Files"
                " »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ]
    duration: Annotated[
        Optional[StrictInt], Field(description="Duration of sent video in seconds")
    ] = None
    width: Annotated[Optional[StrictInt], Field(description="Video width")] = None
    height: Annotated[Optional[StrictInt], Field(description="Video height")] = None
    thumb: Annotated[
        Optional[Union[InputFile, StrictStr]],
        Field(
            description=(
                "Thumbnail of the file sent; can be ignored if thumbnail generation for the file"
                " is supported server-side. The thumbnail should be in JPEG format and less than"
                " 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if"
                " the file is not uploaded using multipart/form-data. Thumbnails can't be reused"
                " and can be only uploaded as a new file, so you can pass"
                " “attach://<file_attach_name>” if the thumbnail was uploaded using"
                " multipart/form-data under <file_attach_name>. [More info on Sending Files"
                " »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ] = None
    caption: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Video caption (may also be used when resending videos by *file_id*), 0-1024"
                " characters after entities parsing"
            )
        ),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Mode for parsing entities in the video caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "A JSON-serialized list of special entities that appear in the caption, which can"
                " be specified instead of *parse_mode*"
            )
        ),
    ] = None
    supports_streaming: Annotated[
        Optional[StrictBool],
        Field(description="Pass *True*, if the uploaded video is suitable for streaming"),
    ] = None
    disable_notification: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Sends the message"
                " [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will"
                " receive a notification with no sound."
            )
        ),
    ] = None
    protect_content: Annotated[
        Optional[StrictBool],
        Field(description="Protects the contents of the sent message from forwarding and saving"),
    ] = None
    reply_to_message_id: Annotated[
        Optional[StrictInt],
        Field(description="If the message is a reply, ID of the original message"),
    ] = None
    allow_sending_without_reply: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the message should be sent even if the specified replied-to"
                " message is not found"
            )
        ),
    ] = None
    reply_markup: Annotated[
        Optional[
            Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]
        ],
        Field(
            description=(
                "Additional interface options. A JSON-serialized object for an [inline"
                " keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating),"
                " [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions"
                " to remove reply keyboard or to force a reply from the user."
            )
        ),
    ] = None


class SendAnimation(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    animation: Annotated[
        Union[InputFile, StrictStr],
        Field(
            description=(
                "Animation to send. Pass a file_id as String to send an animation that exists on"
                " the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to"
                " get an animation from the Internet, or upload a new animation using"
                " multipart/form-data. [More info on Sending Files"
                " »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ]
    duration: Annotated[
        Optional[StrictInt], Field(description="Duration of sent animation in seconds")
    ] = None
    width: Annotated[Optional[StrictInt], Field(description="Animation width")] = None
    height: Annotated[Optional[StrictInt], Field(description="Animation height")] = None
    thumb: Annotated[
        Optional[Union[InputFile, StrictStr]],
        Field(
            description=(
                "Thumbnail of the file sent; can be ignored if thumbnail generation for the file"
                " is supported server-side. The thumbnail should be in JPEG format and less than"
                " 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if"
                " the file is not uploaded using multipart/form-data. Thumbnails can't be reused"
                " and can be only uploaded as a new file, so you can pass"
                " “attach://<file_attach_name>” if the thumbnail was uploaded using"
                " multipart/form-data under <file_attach_name>. [More info on Sending Files"
                " »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ] = None
    caption: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Animation caption (may also be used when resending animation by *file_id*),"
                " 0-1024 characters after entities parsing"
            )
        ),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Mode for parsing entities in the animation caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "A JSON-serialized list of special entities that appear in the caption, which can"
                " be specified instead of *parse_mode*"
            )
        ),
    ] = None
    disable_notification: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Sends the message"
                " [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will"
                " receive a notification with no sound."
            )
        ),
    ] = None
    protect_content: Annotated[
        Optional[StrictBool],
        Field(description="Protects the contents of the sent message from forwarding and saving"),
    ] = None
    reply_to_message_id: Annotated[
        Optional[StrictInt],
        Field(description="If the message is a reply, ID of the original message"),
    ] = None
    allow_sending_without_reply: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the message should be sent even if the specified replied-to"
                " message is not found"
            )
        ),
    ] = None
    reply_markup: Annotated[
        Optional[
            Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]
        ],
        Field(
            description=(
                "Additional interface options. A JSON-serialized object for an [inline"
                " keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating),"
                " [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions"
                " to remove reply keyboard or to force a reply from the user."
            )
        ),
    ] = None


class SendVoice(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    voice: Annotated[
        Union[InputFile, StrictStr],
        Field(
            description=(
                "Audio file to send. Pass a file_id as String to send a file that exists on the"
                " Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get"
                " a file from the Internet, or upload a new one using multipart/form-data. [More"
                " info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ]
    caption: Annotated[
        Optional[StrictStr],
        Field(description="Voice message caption, 0-1024 characters after entities parsing"),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Mode for parsing entities in the voice message caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "A JSON-serialized list of special entities that appear in the caption, which can"
                " be specified instead of *parse_mode*"
            )
        ),
    ] = None
    duration: Annotated[
        Optional[StrictInt], Field(description="Duration of the voice message in seconds")
    ] = None
    disable_notification: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Sends the message"
                " [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will"
                " receive a notification with no sound."
            )
        ),
    ] = None
    protect_content: Annotated[
        Optional[StrictBool],
        Field(description="Protects the contents of the sent message from forwarding and saving"),
    ] = None
    reply_to_message_id: Annotated[
        Optional[StrictInt],
        Field(description="If the message is a reply, ID of the original message"),
    ] = None
    allow_sending_without_reply: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the message should be sent even if the specified replied-to"
                " message is not found"
            )
        ),
    ] = None
    reply_markup: Annotated[
        Optional[
            Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]
        ],
        Field(
            description=(
                "Additional interface options. A JSON-serialized object for an [inline"
                " keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating),"
                " [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions"
                " to remove reply keyboard or to force a reply from the user."
            )
        ),
    ] = None


class SendVideoNote(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    video_note: Annotated[
        Union[InputFile, StrictStr],
        Field(
            description=(
                "Video note to send. Pass a file_id as String to send a video note that exists"
                " on the Telegram servers (recommended) or upload a new video using"
                " multipart/form-data. [More info on Sending Files"
                " »](https://core.telegram.org/bots/api/#sending-files). Sending video notes by a"
                " URL is currently unsupported"
            )
        ),
    ]
    duration: Annotated[
        Optional[StrictInt], Field(description="Duration of sent video in seconds")
    ] = None
    length: Annotated[
        Optional[StrictInt],
        Field(description="Video width and height, i.e. diameter of the video message"),
    ] = None
    thumb: Annotated[
        Optional[Union[InputFile, StrictStr]],
        Field(
            description=(
                "Thumbnail of the file sent; can be ignored if thumbnail generation for the file"
                " is supported server-side. The thumbnail should be in JPEG format and less than"
                " 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if"
                " the file is not uploaded using multipart/form-data. Thumbnails can't be reused"
                " and can be only uploaded as a new file, so you can pass"
                " “attach://<file_attach_name>” if the thumbnail was uploaded using"
                " multipart/form-data under <file_attach_name>. [More info on Sending Files"
                " »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ] = None
    disable_notification: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Sends the message"
                " [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will"
                " receive a notification with no sound."
            )
        ),
    ] = None
    protect_content: Annotated[
        Optional[StrictBool],
        Field(description="Protects the contents of the sent message from forwarding and saving"),
    ] = None
    reply_to_message_id: Annotated[
        Optional[StrictInt],
        Field(description="If the message is a reply, ID of the original message"),
    ] = None
    allow_sending_without_reply: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the message should be sent even if the specified replied-to"
                " message is not found"
            )
        ),
    ] = None
    reply_markup: Annotated[
        Optional[
            Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]
        ],
        Field(
            description=(
                "Additional interface options. A JSON-serialized object for an [inline"
                " keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating),"
                " [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions"
                " to remove reply keyboard or to force a reply from the user."
            )
        ),
    ] = None


class SendLocation(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    latitude: Annotated[StrictFloat, Field(description="Latitude of the location")]
    longitude: Annotated[StrictFloat, Field(description="Longitude of the location")]
    horizontal_accuracy: Annotated[
        Optional[StrictFloat],
        Field(
            description="The radius of uncertainty for the location, measured in meters; 0-1500"
        ),
    ] = None
    live_period: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Period in seconds for which the location will be updated (see [Live"
                " Locations](https://telegram.org/blog/live-locations), should be between 60 and"
                " 86400."
            )
        ),
    ] = None
    heading: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "For live locations, a direction in which the user is moving, in degrees. Must be"
                " between 1 and 360 if specified."
            )
        ),
    ] = None
    proximity_alert_radius: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "For live locations, a maximum distance for proximity alerts about approaching"
                " another chat member, in meters. Must be between 1 and 100000 if specified."
            )
        ),
    ] = None
    disable_notification: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Sends the message"
                " [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will"
                " receive a notification with no sound."
            )
        ),
    ] = None
    protect_content: Annotated[
        Optional[StrictBool],
        Field(description="Protects the contents of the sent message from forwarding and saving"),
    ] = None
    reply_to_message_id: Annotated[
        Optional[StrictInt],
        Field(description="If the message is a reply, ID of the original message"),
    ] = None
    allow_sending_without_reply: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the message should be sent even if the specified replied-to"
                " message is not found"
            )
        ),
    ] = None
    reply_markup: Annotated[
        Optional[
            Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]
        ],
        Field(
            description=(
                "Additional interface options. A JSON-serialized object for an [inline"
                " keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating),"
                " [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions"
                " to remove reply keyboard or to force a reply from the user."
            )
        ),
    ] = None


class EditMessageLiveLocation(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Optional[Union[StrictInt, StrictStr]],
        Field(
            description=(
                "Required if *inline_message_id* is not specified. Unique identifier for the"
                " target chat or username of the target channel (in the format `@channelusername`)"
            )
        ),
    ] = None
    message_id: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Required if *inline_message_id* is not specified. Identifier of the message"
                " to edit"
            )
        ),
    ] = None
    inline_message_id: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Required if *chat_id* and *message_id* are not specified. Identifier of the"
                " inline message"
            )
        ),
    ] = None
    latitude: Annotated[StrictFloat, Field(description="Latitude of new location")]
    longitude: Annotated[StrictFloat, Field(description="Longitude of new location")]
    horizontal_accuracy: Annotated[
        Optional[StrictFloat],
        Field(
            description="The radius of uncertainty for the location, measured in meters; 0-1500"
        ),
    ] = None
    heading: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Direction in which the user is moving, in degrees. Must be between 1 and 360 if"
                " specified."
            )
        ),
    ] = None
    proximity_alert_radius: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Maximum distance for proximity alerts about approaching another chat member, in"
                " meters. Must be between 1 and 100000 if specified."
            )
        ),
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None


class StopMessageLiveLocation(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Optional[Union[StrictInt, StrictStr]],
        Field(
            description=(
                "Required if *inline_message_id* is not specified. Unique identifier for the"
                " target chat or username of the target channel (in the format `@channelusername`)"
            )
        ),
    ] = None
    message_id: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Required if *inline_message_id* is not specified. Identifier of the message"
                " with live location to stop"
            )
        ),
    ] = None
    inline_message_id: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Required if *chat_id* and *message_id* are not specified. Identifier of the"
                " inline message"
            )
        ),
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None


class SendVenue(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    latitude: Annotated[StrictFloat, Field(description="Latitude of the venue")]
    longitude: Annotated[StrictFloat, Field(description="Longitude of the venue")]
    title: Annotated[StrictStr, Field(description="Name of the venue")]
    address: Annotated[StrictStr, Field(description="Address of the venue")]
    foursquare_id: Annotated[
        Optional[StrictStr], Field(description="Foursquare identifier of the venue")
    ] = None
    foursquare_type: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Foursquare type of the venue, if known. (For example,"
                " “arts_entertainment/default”, “arts_entertainment/aquarium” or"
                " “food/icecream”.)"
            )
        ),
    ] = None
    google_place_id: Annotated[
        Optional[StrictStr], Field(description="Google Places identifier of the venue")
    ] = None
    google_place_type: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Google Places type of the venue. (See [supported"
                " types](https://developers.google.com/places/web-service/supported_types).)"
            )
        ),
    ] = None
    disable_notification: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Sends the message"
                " [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will"
                " receive a notification with no sound."
            )
        ),
    ] = None
    protect_content: Annotated[
        Optional[StrictBool],
        Field(description="Protects the contents of the sent message from forwarding and saving"),
    ] = None
    reply_to_message_id: Annotated[
        Optional[StrictInt],
        Field(description="If the message is a reply, ID of the original message"),
    ] = None
    allow_sending_without_reply: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the message should be sent even if the specified replied-to"
                " message is not found"
            )
        ),
    ] = None
    reply_markup: Annotated[
        Optional[
            Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]
        ],
        Field(
            description=(
                "Additional interface options. A JSON-serialized object for an [inline"
                " keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating),"
                " [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions"
                " to remove reply keyboard or to force a reply from the user."
            )
        ),
    ] = None


class SendContact(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    phone_number: Annotated[StrictStr, Field(description="Contact's phone number")]
    first_name: Annotated[StrictStr, Field(description="Contact's first name")]
    last_name: Annotated[Optional[StrictStr], Field(description="Contact's last name")] = None
    vcard: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Additional data about the contact in the form of a"
                " [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes"
            )
        ),
    ] = None
    disable_notification: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Sends the message"
                " [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will"
                " receive a notification with no sound."
            )
        ),
    ] = None
    protect_content: Annotated[
        Optional[StrictBool],
        Field(description="Protects the contents of the sent message from forwarding and saving"),
    ] = None
    reply_to_message_id: Annotated[
        Optional[StrictInt],
        Field(description="If the message is a reply, ID of the original message"),
    ] = None
    allow_sending_without_reply: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the message should be sent even if the specified replied-to"
                " message is not found"
            )
        ),
    ] = None
    reply_markup: Annotated[
        Optional[
            Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]
        ],
        Field(
            description=(
                "Additional interface options. A JSON-serialized object for an [inline"
                " keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating),"
                " [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions"
                " to remove keyboard or to force a reply from the user."
            )
        ),
    ] = None


class SendPoll(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    question: Annotated[StrictStr, Field(description="Poll question, 1-300 characters")]
    options: Annotated[
        Sequence[StrictStr],
        Field(
            description=(
                "A JSON-serialized list of answer options, 2-10 strings 1-100 characters each"
            )
        ),
    ]
    is_anonymous: Annotated[
        StrictBool,
        Field(description="*True*, if the poll needs to be anonymous, defaults to *True*"),
    ] = True
    type: Annotated[
        PollType, Field(description="Poll type, “quiz” or “regular”, defaults to “regular”")
    ] = PollType.regular
    allows_multiple_answers: Annotated[
        StrictBool,
        Field(
            description=(
                "*True*, if the poll allows multiple answers, ignored for polls in quiz mode,"
                " defaults to *False*"
            )
        ),
    ] = False
    correct_option_id: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "0-based identifier of the correct answer option, required for polls in quiz mode"
            )
        ),
    ] = None
    explanation: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Text that is shown when a user chooses an incorrect answer or taps on the lamp"
                " icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after"
                " entities parsing"
            )
        ),
    ] = None
    explanation_parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Mode for parsing entities in the explanation. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    explanation_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "A JSON-serialized list of special entities that appear in the poll explanation,"
                " which can be specified instead of *parse_mode*"
            )
        ),
    ] = None
    open_period: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Amount of time in seconds the poll will be active after creation, 5-600. Can't be"
                " used together with *close_date*."
            )
        ),
    ] = None
    close_date: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Point in time (Unix timestamp) when the poll will be automatically closed. Must"
                " be at least 5 and no more than 600 seconds in the future. Can't be used together"
                " with *open_period*."
            )
        ),
    ] = None
    is_closed: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the poll needs to be immediately closed. This can be useful for"
                " poll preview."
            )
        ),
    ] = None
    disable_notification: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Sends the message"
                " [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will"
                " receive a notification with no sound."
            )
        ),
    ] = None
    protect_content: Annotated[
        Optional[StrictBool],
        Field(description="Protects the contents of the sent message from forwarding and saving"),
    ] = None
    reply_to_message_id: Annotated[
        Optional[StrictInt],
        Field(description="If the message is a reply, ID of the original message"),
    ] = None
    allow_sending_without_reply: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the message should be sent even if the specified replied-to"
                " message is not found"
            )
        ),
    ] = None
    reply_markup: Annotated[
        Optional[
            Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]
        ],
        Field(
            description=(
                "Additional interface options. A JSON-serialized object for an [inline"
                " keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating),"
                " [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions"
                " to remove reply keyboard or to force a reply from the user."
            )
        ),
    ] = None


class SendDice(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    emoji: Annotated[
        Emoji,
        Field(
            description=(
                "Emoji on which the dice throw animation is based. Currently, must be one of “🎲”,"
                " “🎯”, “🏀”, “⚽”, “🎳”, or “🎰”. Dice can have values 1-6 for “🎲”, “🎯” and “🎳”,"
                " values 1-5 for “🏀” and “⚽”, and values 1-64 for “🎰”. Defaults to “🎲”"
            )
        ),
    ] = Emoji.dice
    disable_notification: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Sends the message"
                " [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will"
                " receive a notification with no sound."
            )
        ),
    ] = None
    protect_content: Annotated[
        Optional[StrictBool],
        Field(description="Protects the contents of the sent message from forwarding"),
    ] = None
    reply_to_message_id: Annotated[
        Optional[StrictInt],
        Field(description="If the message is a reply, ID of the original message"),
    ] = None
    allow_sending_without_reply: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the message should be sent even if the specified replied-to"
                " message is not found"
            )
        ),
    ] = None
    reply_markup: Annotated[
        Optional[
            Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]
        ],
        Field(
            description=(
                "Additional interface options. A JSON-serialized object for an [inline"
                " keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating),"
                " [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions"
                " to remove reply keyboard or to force a reply from the user."
            )
        ),
    ] = None


class EditMessageText(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Optional[Union[StrictInt, StrictStr]],
        Field(
            description=(
                "Required if *inline_message_id* is not specified. Unique identifier for the"
                " target chat or username of the target channel (in the format `@channelusername`)"
            )
        ),
    ] = None
    message_id: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Required if *inline_message_id* is not specified. Identifier of the message"
                " to edit"
            )
        ),
    ] = None
    inline_message_id: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Required if *chat_id* and *message_id* are not specified. Identifier of the"
                " inline message"
            )
        ),
    ] = None
    text: Annotated[
        StrictStr,
        Field(description="New text of the message, 1-4096 characters after entities parsing"),
    ]
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Mode for parsing entities in the message text. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "A JSON-serialized list of special entities that appear in message text, which can"
                " be specified instead of *parse_mode*"
            )
        ),
    ] = None
    disable_web_page_preview: Annotated[
        Optional[StrictBool], Field(description="Disables link previews for links in this message")
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None


class EditMessageCaption(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Optional[Union[StrictInt, StrictStr]],
        Field(
            description=(
                "Required if *inline_message_id* is not specified. Unique identifier for the"
                " target chat or username of the target channel (in the format `@channelusername`)"
            )
        ),
    ] = None
    message_id: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Required if *inline_message_id* is not specified. Identifier of the message"
                " to edit"
            )
        ),
    ] = None
    inline_message_id: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Required if *chat_id* and *message_id* are not specified. Identifier of the"
                " inline message"
            )
        ),
    ] = None
    caption: Annotated[
        Optional[StrictStr],
        Field(description="New caption of the message, 0-1024 characters after entities parsing"),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Mode for parsing entities in the message caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "A JSON-serialized list of special entities that appear in the caption, which can"
                " be specified instead of *parse_mode*"
            )
        ),
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None


class EditMessageMedia(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Optional[Union[StrictInt, StrictStr]],
        Field(
            description=(
                "Required if *inline_message_id* is not specified. Unique identifier for the"
                " target chat or username of the target channel (in the format `@channelusername`)"
            )
        ),
    ] = None
    message_id: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Required if *inline_message_id* is not specified. Identifier of the message"
                " to edit"
            )
        ),
    ] = None
    inline_message_id: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Required if *chat_id* and *message_id* are not specified. Identifier of the"
                " inline message"
            )
        ),
    ] = None
    media: InputMedia
    reply_markup: Optional[InlineKeyboardMarkup] = None


class EditMessageReplyMarkup(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Optional[Union[StrictInt, StrictStr]],
        Field(
            description=(
                "Required if *inline_message_id* is not specified. Unique identifier for the"
                " target chat or username of the target channel (in the format `@channelusername`)"
            )
        ),
    ] = None
    message_id: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "Required if *inline_message_id* is not specified. Identifier of the message"
                " to edit"
            )
        ),
    ] = None
    inline_message_id: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Required if *chat_id* and *message_id* are not specified. Identifier of the"
                " inline message"
            )
        ),
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None


class StopPoll(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    message_id: Annotated[
        StrictInt, Field(description="Identifier of the original message with the poll")
    ]
    reply_markup: Optional[InlineKeyboardMarkup] = None


class SendSticker(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    sticker: Annotated[
        Union[InputFile, StrictStr],
        Field(
            description=(
                "Sticker to send. Pass a file_id as String to send a file that exists on the"
                " Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get"
                " a .WEBP file from the Internet, or upload a new one using multipart/form-data."
                " [More info on Sending Files"
                " »](https://core.telegram.org/bots/api/#sending-files)"
            )
        ),
    ]
    disable_notification: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Sends the message"
                " [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will"
                " receive a notification with no sound."
            )
        ),
    ] = None
    protect_content: Annotated[
        Optional[StrictBool],
        Field(description="Protects the contents of the sent message from forwarding and saving"),
    ] = None
    reply_to_message_id: Annotated[
        Optional[StrictInt],
        Field(description="If the message is a reply, ID of the original message"),
    ] = None
    allow_sending_without_reply: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the message should be sent even if the specified replied-to"
                " message is not found"
            )
        ),
    ] = None
    reply_markup: Annotated[
        Optional[
            Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]
        ],
        Field(
            description=(
                "Additional interface options. A JSON-serialized object for an [inline"
                " keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating),"
                " [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions"
                " to remove reply keyboard or to force a reply from the user."
            )
        ),
    ] = None


class SendInvoice(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[
        Union[StrictInt, StrictStr],
        Field(
            description=(
                "Unique identifier for the target chat or username of the target channel (in the"
                " format `@channelusername`)"
            )
        ),
    ]
    title: Annotated[StrictStr, Field(description="Product name, 1-32 characters")]
    description: Annotated[StrictStr, Field(description="Product description, 1-255 characters")]
    payload: Annotated[
        StrictStr,
        Field(
            description=(
                "Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user,"
                " use for your internal processes."
            )
        ),
    ]
    provider_token: Annotated[
        StrictStr,
        Field(
            description="Payments provider token, obtained via [Botfather](https://t.me/botfather)"
        ),
    ]
    currency: Annotated[
        StrictStr,
        Field(
            description=(
                "Three-letter ISO 4217 currency code, see [more on"
                " currencies](/bots/payments#supported-currencies)"
            )
        ),
    ]
    prices: Annotated[
        Sequence[LabeledPrice],
        Field(
            description=(
                "Price breakdown, a JSON-serialized list of components (e.g. product price, tax,"
                " discount, delivery cost, delivery tax, bonus, etc.)"
            )
        ),
    ]
    max_tip_amount: Annotated[
        StrictInt,
        Field(
            description=(
                "The maximum accepted amount for tips in the *smallest units* of the currency"
                " (integer, **not** float/double). For example, for a maximum tip of `US$ 1.45`"
                " pass `max_tip_amount = 145`. See the *exp* parameter in"
                " [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it"
                " shows the number of digits past the decimal point for each currency (2 for the"
                " majority of currencies). Defaults to 0"
            )
        ),
    ] = 0
    suggested_tip_amounts: Annotated[
        Optional[Sequence[StrictInt]],
        Field(
            description=(
                "A JSON-serialized array of suggested amounts of tips in the *smallest units* of"
                " the currency (integer, **not** float/double). At most 4 suggested tip amounts"
                " can be specified. The suggested tip amounts must be positive, passed in a"
                " strictly increased order and must not exceed *max_tip_amount*."
            )
        ),
    ] = None
    start_parameter: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Unique deep-linking parameter. If left empty, **forwarded copies** of the sent"
                " message will have a *Pay* button, allowing multiple users to pay directly from"
                " the forwarded message, using the same invoice. If non-empty, forwarded copies of"
                " the sent message will have a *URL* button with a deep link to the bot (instead"
                " of a *Pay* button), with the value used as the start parameter"
            )
        ),
    ] = None
    provider_data: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "A JSON-serialized data about the invoice, which will be shared with the payment"
                " provider. A detailed description of required fields should be provided by the"
                " payment provider."
            )
        ),
    ] = None
    photo_url: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "URL of the product photo for the invoice. Can be a photo of the goods or a"
                " marketing image for a service. People like it better when they see what they are"
                " paying for."
            )
        ),
    ] = None
    photo_size: Annotated[Optional[StrictInt], Field(description="Photo size")] = None
    photo_width: Annotated[Optional[StrictInt], Field(description="Photo width")] = None
    photo_height: Annotated[Optional[StrictInt], Field(description="Photo height")] = None
    need_name: Annotated[
        Optional[StrictBool],
        Field(
            description="Pass *True*, if you require the user's full name to complete the order"
        ),
    ] = None
    need_phone_number: Annotated[
        Optional[StrictBool],
        Field(
            description="Pass *True*, if you require the user's phone number to complete the order"
        ),
    ] = None
    need_email: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if you require the user's email address to complete the order"
            )
        ),
    ] = None
    need_shipping_address: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if you require the user's shipping address to complete the order"
            )
        ),
    ] = None
    send_phone_number_to_provider: Annotated[
        Optional[StrictBool],
        Field(description="Pass *True*, if user's phone number should be sent to provider"),
    ] = None
    send_email_to_provider: Annotated[
        Optional[StrictBool],
        Field(description="Pass *True*, if user's email address should be sent to provider"),
    ] = None
    is_flexible: Annotated[
        Optional[StrictBool],
        Field(description="Pass *True*, if the final price depends on the shipping method"),
    ] = None
    disable_notification: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Sends the message"
                " [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will"
                " receive a notification with no sound."
            )
        ),
    ] = None
    protect_content: Annotated[
        Optional[StrictBool],
        Field(description="Protects the contents of the sent message from forwarding and saving"),
    ] = None
    reply_to_message_id: Annotated[
        Optional[StrictInt],
        Field(description="If the message is a reply, ID of the original message"),
    ] = None
    allow_sending_without_reply: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the message should be sent even if the specified replied-to"
                " message is not found"
            )
        ),
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None


class SendGame(BaseModel):
    class Config:
        allow_mutation = False

    chat_id: Annotated[StrictInt, Field(description="Unique identifier for the target chat")]
    game_short_name: Annotated[
        StrictStr,
        Field(
            description=(
                "Short name of the game, serves as the unique identifier for the game. Set up your"
                " games via [Botfather](https://t.me/botfather)."
            )
        ),
    ]
    disable_notification: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Sends the message"
                " [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will"
                " receive a notification with no sound."
            )
        ),
    ] = None
    protect_content: Annotated[
        Optional[StrictBool],
        Field(description="Protects the contents of the sent message from forwarding and saving"),
    ] = None
    reply_to_message_id: Annotated[
        Optional[StrictInt],
        Field(description="If the message is a reply, ID of the original message"),
    ] = None
    allow_sending_without_reply: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if the message should be sent even if the specified replied-to"
                " message is not found"
            )
        ),
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None


class InlineQueryResultArticle(BaseModel):
    """
    Represents a link to an article or web page.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *article*")]
    id: Annotated[StrictStr, Field(description="Unique identifier for this result, 1-64 Bytes")]
    title: Annotated[StrictStr, Field(description="Title of the result")]
    input_message_content: InputMessageContent
    reply_markup: Optional[InlineKeyboardMarkup] = None
    url: Annotated[Optional[StrictStr], Field(description="*Optional*. URL of the result")] = None
    hide_url: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. Pass *True*, if you don't want the URL to be shown in the message"
            )
        ),
    ] = None
    description: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Short description of the result")
    ] = None
    thumb_url: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Url of the thumbnail for the result")
    ] = None
    thumb_width: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Thumbnail width")
    ] = None
    thumb_height: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Thumbnail height")
    ] = None


class InlineQueryResultPhoto(BaseModel):
    """
    Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use *input_message_content* to send a message with the specified content instead of the photo.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *photo*")]
    id: Annotated[StrictStr, Field(description="Unique identifier for this result, 1-64 bytes")]
    photo_url: Annotated[
        StrictStr,
        Field(
            description=(
                "A valid URL of the photo. Photo must be in **JPEG** format. Photo size must not"
                " exceed 5MB"
            )
        ),
    ]
    thumb_url: Annotated[StrictStr, Field(description="URL of the thumbnail for the photo")]
    photo_width: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Width of the photo")
    ] = None
    photo_height: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Height of the photo")
    ] = None
    title: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Title for the result")
    ] = None
    description: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Short description of the result")
    ] = None
    caption: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Caption of the photo to be sent, 0-1024 characters after entities"
                " parsing"
            )
        ),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Mode for parsing entities in the photo caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. List of special entities that appear in the caption, which can be"
                " specified instead of *parse_mode*"
            )
        ),
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None
    input_message_content: Optional[InputMessageContent] = None


class InlineQueryResultGif(BaseModel):
    """
    Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use *input_message_content* to send a message with the specified content instead of the animation.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *gif*")]
    id: Annotated[StrictStr, Field(description="Unique identifier for this result, 1-64 bytes")]
    gif_url: Annotated[
        StrictStr, Field(description="A valid URL for the GIF file. File size must not exceed 1MB")
    ]
    gif_width: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Width of the GIF")
    ] = None
    gif_height: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Height of the GIF")
    ] = None
    gif_duration: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Duration of the GIF in seconds")
    ] = None
    thumb_url: Annotated[
        StrictStr,
        Field(
            description=(
                "URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result"
            )
        ),
    ]
    thumb_mime_type: Annotated[
        ThumbMimeType,
        Field(
            description=(
                "*Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”,"
                " or “video/mp4”. Defaults to “image/jpeg”"
            )
        ),
    ] = ThumbMimeType.image_jpeg
    title: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Title for the result")
    ] = None
    caption: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities"
                " parsing"
            )
        ),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Mode for parsing entities in the caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. List of special entities that appear in the caption, which can be"
                " specified instead of *parse_mode*"
            )
        ),
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None
    input_message_content: Optional[InputMessageContent] = None


class InlineQueryResultMpeg4Gif(BaseModel):
    """
    Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use *input_message_content* to send a message with the specified content instead of the animation.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *mpeg4_gif*")]
    id: Annotated[StrictStr, Field(description="Unique identifier for this result, 1-64 bytes")]
    mpeg4_url: Annotated[
        StrictStr, Field(description="A valid URL for the MP4 file. File size must not exceed 1MB")
    ]
    mpeg4_width: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Video width")
    ] = None
    mpeg4_height: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Video height")
    ] = None
    mpeg4_duration: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Video duration in seconds")
    ] = None
    thumb_url: Annotated[
        StrictStr,
        Field(
            description=(
                "URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result"
            )
        ),
    ]
    thumb_mime_type: Annotated[
        ThumbMimeType,
        Field(
            description=(
                "*Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”,"
                " or “video/mp4”. Defaults to “image/jpeg”"
            )
        ),
    ] = ThumbMimeType.image_jpeg
    title: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Title for the result")
    ] = None
    caption: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after"
                " entities parsing"
            )
        ),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Mode for parsing entities in the caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. List of special entities that appear in the caption, which can be"
                " specified instead of *parse_mode*"
            )
        ),
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None
    input_message_content: Optional[InputMessageContent] = None


class InlineQueryResultVideo(BaseModel):
    """
        Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use *input_message_content* to send a message with the specified content instead of the video.

    If an InlineQueryResultVideo message contains an embedded video (e.g., YouTube), you **must** replace its content using *input_message_content*.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *video*")]
    id: Annotated[StrictStr, Field(description="Unique identifier for this result, 1-64 bytes")]
    video_url: Annotated[
        StrictStr, Field(description="A valid URL for the embedded video player or video file")
    ]
    mime_type: Annotated[
        MimeType,
        Field(description="Mime type of the content of video url, “text/html” or “video/mp4”"),
    ]
    thumb_url: Annotated[
        StrictStr, Field(description="URL of the thumbnail (JPEG only) for the video")
    ]
    title: Annotated[StrictStr, Field(description="Title for the result")]
    caption: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Caption of the video to be sent, 0-1024 characters after entities"
                " parsing"
            )
        ),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Mode for parsing entities in the video caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. List of special entities that appear in the caption, which can be"
                " specified instead of *parse_mode*"
            )
        ),
    ] = None
    video_width: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Video width")
    ] = None
    video_height: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Video height")
    ] = None
    video_duration: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Video duration in seconds")
    ] = None
    description: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Short description of the result")
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None
    input_message_content: Optional[InputMessageContent] = None


class InlineQueryResultAudio(BaseModel):
    """
    Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use *input_message_content* to send a message with the specified content instead of the audio.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *audio*")]
    id: Annotated[StrictStr, Field(description="Unique identifier for this result, 1-64 bytes")]
    audio_url: Annotated[StrictStr, Field(description="A valid URL for the audio file")]
    title: Annotated[StrictStr, Field(description="Title")]
    caption: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. Caption, 0-1024 characters after entities parsing"),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Mode for parsing entities in the audio caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. List of special entities that appear in the caption, which can be"
                " specified instead of *parse_mode*"
            )
        ),
    ] = None
    performer: Annotated[Optional[StrictStr], Field(description="*Optional*. Performer")] = None
    audio_duration: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Audio duration in seconds")
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None
    input_message_content: Optional[InputMessageContent] = None


class InlineQueryResultVoice(BaseModel):
    """
    Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use *input_message_content* to send a message with the specified content instead of the the voice message.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *voice*")]
    id: Annotated[StrictStr, Field(description="Unique identifier for this result, 1-64 bytes")]
    voice_url: Annotated[StrictStr, Field(description="A valid URL for the voice recording")]
    title: Annotated[StrictStr, Field(description="Recording title")]
    caption: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. Caption, 0-1024 characters after entities parsing"),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Mode for parsing entities in the voice message caption. See"
                " [formatting options](https://core.telegram.org/bots/api/#formatting-options) for"
                " more details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. List of special entities that appear in the caption, which can be"
                " specified instead of *parse_mode*"
            )
        ),
    ] = None
    voice_duration: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Recording duration in seconds")
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None
    input_message_content: Optional[InputMessageContent] = None


class InlineQueryResultDocument(BaseModel):
    """
    Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input_message_content* to send a message with the specified content instead of the file. Currently, only **.PDF** and **.ZIP** files can be sent using this method.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *document*")]
    id: Annotated[StrictStr, Field(description="Unique identifier for this result, 1-64 bytes")]
    title: Annotated[StrictStr, Field(description="Title for the result")]
    caption: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Caption of the document to be sent, 0-1024 characters after entities"
                " parsing"
            )
        ),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Mode for parsing entities in the document caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. List of special entities that appear in the caption, which can be"
                " specified instead of *parse_mode*"
            )
        ),
    ] = None
    document_url: Annotated[StrictStr, Field(description="A valid URL for the file")]
    mime_type: Annotated[
        DocumentMimeType,
        Field(
            description=(
                "Mime type of the content of the file, either “application/pdf” or"
                " “application/zip”"
            )
        ),
    ]
    description: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Short description of the result")
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None
    input_message_content: Optional[InputMessageContent] = None
    thumb_url: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. URL of the thumbnail (JPEG only) for the file"),
    ] = None
    thumb_width: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Thumbnail width")
    ] = None
    thumb_height: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Thumbnail height")
    ] = None


class InlineQueryResultLocation(BaseModel):
    """
    Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use *input_message_content* to send a message with the specified content instead of the location.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *location*")]
    id: Annotated[StrictStr, Field(description="Unique identifier for this result, 1-64 Bytes")]
    latitude: Annotated[StrictFloat, Field(description="Location latitude in degrees")]
    longitude: Annotated[StrictFloat, Field(description="Location longitude in degrees")]
    title: Annotated[StrictStr, Field(description="Location title")]
    horizontal_accuracy: Annotated[
        Optional[StrictFloat],
        Field(
            description=(
                "*Optional*. The radius of uncertainty for the location, measured in meters;"
                " 0-1500"
            )
        ),
    ] = None
    live_period: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. Period in seconds for which the location can be updated, should be"
                " between 60 and 86400."
            )
        ),
    ] = None
    heading: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. For live locations, a direction in which the user is moving, in"
                " degrees. Must be between 1 and 360 if specified."
            )
        ),
    ] = None
    proximity_alert_radius: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. For live locations, a maximum distance for proximity alerts about"
                " approaching another chat member, in meters. Must be between 1 and 100000 if"
                " specified."
            )
        ),
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None
    input_message_content: Optional[InputMessageContent] = None
    thumb_url: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Url of the thumbnail for the result")
    ] = None
    thumb_width: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Thumbnail width")
    ] = None
    thumb_height: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Thumbnail height")
    ] = None


class InlineQueryResultVenue(BaseModel):
    """
    Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use *input_message_content* to send a message with the specified content instead of the venue.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *venue*")]
    id: Annotated[StrictStr, Field(description="Unique identifier for this result, 1-64 Bytes")]
    latitude: Annotated[
        StrictFloat, Field(description="Latitude of the venue location in degrees")
    ]
    longitude: Annotated[
        StrictFloat, Field(description="Longitude of the venue location in degrees")
    ]
    title: Annotated[StrictStr, Field(description="Title of the venue")]
    address: Annotated[StrictStr, Field(description="Address of the venue")]
    foursquare_id: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. Foursquare identifier of the venue if known"),
    ] = None
    foursquare_type: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Foursquare type of the venue, if known. (For example,"
                " “arts_entertainment/default”, “arts_entertainment/aquarium” or"
                " “food/icecream”.)"
            )
        ),
    ] = None
    google_place_id: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Google Places identifier of the venue")
    ] = None
    google_place_type: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Google Places type of the venue. (See [supported"
                " types](https://developers.google.com/places/web-service/supported_types).)"
            )
        ),
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None
    input_message_content: Optional[InputMessageContent] = None
    thumb_url: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Url of the thumbnail for the result")
    ] = None
    thumb_width: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Thumbnail width")
    ] = None
    thumb_height: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Thumbnail height")
    ] = None


class InlineQueryResultContact(BaseModel):
    """
    Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use *input_message_content* to send a message with the specified content instead of the contact.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *contact*")]
    id: Annotated[StrictStr, Field(description="Unique identifier for this result, 1-64 Bytes")]
    phone_number: Annotated[StrictStr, Field(description="Contact's phone number")]
    first_name: Annotated[StrictStr, Field(description="Contact's first name")]
    last_name: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Contact's last name")
    ] = None
    vcard: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Additional data about the contact in the form of a"
                " [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes"
            )
        ),
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None
    input_message_content: Optional[InputMessageContent] = None
    thumb_url: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Url of the thumbnail for the result")
    ] = None
    thumb_width: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Thumbnail width")
    ] = None
    thumb_height: Annotated[
        Optional[StrictInt], Field(description="*Optional*. Thumbnail height")
    ] = None


class InlineQueryResultCachedPhoto(BaseModel):
    """
    Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use *input_message_content* to send a message with the specified content instead of the photo.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *photo*")]
    id: Annotated[StrictStr, Field(description="Unique identifier for this result, 1-64 bytes")]
    photo_file_id: Annotated[StrictStr, Field(description="A valid file identifier of the photo")]
    title: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Title for the result")
    ] = None
    description: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Short description of the result")
    ] = None
    caption: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Caption of the photo to be sent, 0-1024 characters after entities"
                " parsing"
            )
        ),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Mode for parsing entities in the photo caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. List of special entities that appear in the caption, which can be"
                " specified instead of *parse_mode*"
            )
        ),
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None
    input_message_content: Optional[InputMessageContent] = None


class InlineQueryResultCachedGif(BaseModel):
    """
    Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use *input_message_content* to send a message with specified content instead of the animation.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *gif*")]
    id: Annotated[StrictStr, Field(description="Unique identifier for this result, 1-64 bytes")]
    gif_file_id: Annotated[
        StrictStr, Field(description="A valid file identifier for the GIF file")
    ]
    title: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Title for the result")
    ] = None
    caption: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities"
                " parsing"
            )
        ),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Mode for parsing entities in the caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. List of special entities that appear in the caption, which can be"
                " specified instead of *parse_mode*"
            )
        ),
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None
    input_message_content: Optional[InputMessageContent] = None


class InlineQueryResultCachedMpeg4Gif(BaseModel):
    """
    Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use *input_message_content* to send a message with the specified content instead of the animation.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *mpeg4_gif*")]
    id: Annotated[StrictStr, Field(description="Unique identifier for this result, 1-64 bytes")]
    mpeg4_file_id: Annotated[
        StrictStr, Field(description="A valid file identifier for the MP4 file")
    ]
    title: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Title for the result")
    ] = None
    caption: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after"
                " entities parsing"
            )
        ),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Mode for parsing entities in the caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. List of special entities that appear in the caption, which can be"
                " specified instead of *parse_mode*"
            )
        ),
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None
    input_message_content: Optional[InputMessageContent] = None


class InlineQueryResultCachedSticker(BaseModel):
    """
    Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use *input_message_content* to send a message with the specified content instead of the sticker.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *sticker*")]
    id: Annotated[StrictStr, Field(description="Unique identifier for this result, 1-64 bytes")]
    sticker_file_id: Annotated[
        StrictStr, Field(description="A valid file identifier of the sticker")
    ]
    reply_markup: Optional[InlineKeyboardMarkup] = None
    input_message_content: Optional[InputMessageContent] = None


class InlineQueryResultCachedDocument(BaseModel):
    """
    Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input_message_content* to send a message with the specified content instead of the file.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *document*")]
    id: Annotated[StrictStr, Field(description="Unique identifier for this result, 1-64 bytes")]
    title: Annotated[StrictStr, Field(description="Title for the result")]
    document_file_id: Annotated[
        StrictStr, Field(description="A valid file identifier for the file")
    ]
    description: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Short description of the result")
    ] = None
    caption: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Caption of the document to be sent, 0-1024 characters after entities"
                " parsing"
            )
        ),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Mode for parsing entities in the document caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. List of special entities that appear in the caption, which can be"
                " specified instead of *parse_mode*"
            )
        ),
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None
    input_message_content: Optional[InputMessageContent] = None


class InlineQueryResultCachedVideo(BaseModel):
    """
    Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use *input_message_content* to send a message with the specified content instead of the video.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *video*")]
    id: Annotated[StrictStr, Field(description="Unique identifier for this result, 1-64 bytes")]
    video_file_id: Annotated[
        StrictStr, Field(description="A valid file identifier for the video file")
    ]
    title: Annotated[StrictStr, Field(description="Title for the result")]
    description: Annotated[
        Optional[StrictStr], Field(description="*Optional*. Short description of the result")
    ] = None
    caption: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Caption of the video to be sent, 0-1024 characters after entities"
                " parsing"
            )
        ),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Mode for parsing entities in the video caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. List of special entities that appear in the caption, which can be"
                " specified instead of *parse_mode*"
            )
        ),
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None
    input_message_content: Optional[InputMessageContent] = None


class InlineQueryResultCachedVoice(BaseModel):
    """
    Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use *input_message_content* to send a message with the specified content instead of the voice message.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *voice*")]
    id: Annotated[StrictStr, Field(description="Unique identifier for this result, 1-64 bytes")]
    voice_file_id: Annotated[
        StrictStr, Field(description="A valid file identifier for the voice message")
    ]
    title: Annotated[StrictStr, Field(description="Voice message title")]
    caption: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. Caption, 0-1024 characters after entities parsing"),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Mode for parsing entities in the voice message caption. See"
                " [formatting options](https://core.telegram.org/bots/api/#formatting-options) for"
                " more details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. List of special entities that appear in the caption, which can be"
                " specified instead of *parse_mode*"
            )
        ),
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None
    input_message_content: Optional[InputMessageContent] = None


class InlineQueryResultCachedAudio(BaseModel):
    """
    Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use *input_message_content* to send a message with the specified content instead of the audio.
    """

    class Config:
        allow_mutation = False

    type: Annotated[StrictStr, Field(description="Type of the result, must be *audio*")]
    id: Annotated[StrictStr, Field(description="Unique identifier for this result, 1-64 bytes")]
    audio_file_id: Annotated[
        StrictStr, Field(description="A valid file identifier for the audio file")
    ]
    caption: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. Caption, 0-1024 characters after entities parsing"),
    ] = None
    parse_mode: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Mode for parsing entities in the audio caption. See [formatting"
                " options](https://core.telegram.org/bots/api/#formatting-options) for more"
                " details."
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. List of special entities that appear in the caption, which can be"
                " specified instead of *parse_mode*"
            )
        ),
    ] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None
    input_message_content: Optional[InputMessageContent] = None


class InlineQueryResult(BaseModel):
    class Config:
        allow_mutation = False

    __root__: Annotated[
        Union[
            InlineQueryResultCachedAudio,
            InlineQueryResultCachedDocument,
            InlineQueryResultCachedGif,
            InlineQueryResultCachedMpeg4Gif,
            InlineQueryResultCachedPhoto,
            InlineQueryResultCachedSticker,
            InlineQueryResultCachedVideo,
            InlineQueryResultCachedVoice,
            InlineQueryResultArticle,
            InlineQueryResultAudio,
            InlineQueryResultContact,
            InlineQueryResultGame,
            InlineQueryResultDocument,
            InlineQueryResultGif,
            InlineQueryResultLocation,
            InlineQueryResultMpeg4Gif,
            InlineQueryResultPhoto,
            InlineQueryResultVenue,
            InlineQueryResultVideo,
            InlineQueryResultVoice,
        ],
        Field(
            description=(
                "This object represents one result of an inline query. Telegram clients currently"
                " support results of the following 20 types:"
            )
        ),
    ]


class AnswerInlineQuery(BaseModel):
    class Config:
        allow_mutation = False

    inline_query_id: Annotated[
        StrictStr, Field(description="Unique identifier for the answered query")
    ]
    results: Annotated[
        Sequence[InlineQueryResult],
        Field(description="A JSON-serialized array of results for the inline query"),
    ]
    cache_time: Annotated[
        StrictInt,
        Field(
            description=(
                "The maximum amount of time in seconds that the result of the inline query may be"
                " cached on the server. Defaults to 300."
            )
        ),
    ] = 300
    is_personal: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "Pass *True*, if results may be cached on the server side only for the user that"
                " sent the query. By default, results may be returned to any user who sends the"
                " same query"
            )
        ),
    ] = None
    next_offset: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "Pass the offset that a client should send in the next query with the same text to"
                " receive more results. Pass an empty string if there are no more results or if"
                " you don't support pagination. Offset length can't exceed 64 bytes."
            )
        ),
    ] = None
    switch_pm_text: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "If passed, clients will display a button with specified text that switches the"
                " user to a private chat with the bot and sends the bot a start message with the"
                " parameter *switch_pm_parameter*"
            )
        ),
    ] = None
    switch_pm_parameter: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "[Deep-linking](/bots#deep-linking) parameter for the /start message sent to the"
                " bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`,"
                " `0-9`, `_` and `-` are allowed.  \n\n*Example:* An inline bot that sends YouTube"
                " videos can ask the user to connect the bot to their YouTube account to adapt"
                " search results accordingly. To do this, it displays a 'Connect your YouTube"
                " account' button above the results, or even before showing any. The user presses"
                " the button, switches to a private chat with the bot and, in doing so, passes a"
                " start parameter that instructs the bot to return an OAuth link. Once done, the"
                " bot can offer a"
                " [*switch_inline*](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)"
                " button so that the user can easily return to the chat where they wanted to use"
                " the bot's inline capabilities."
            )
        ),
    ] = None


class Update(BaseModel):
    """
        This [object](https://core.telegram.org/bots/api/#available-types) represents an incoming update.
    At most **one** of the optional parameters can be present in any given update.
    """

    class Config:
        allow_mutation = False

    update_id: Annotated[
        StrictInt,
        Field(
            description=(
                "The update's unique identifier. Update identifiers start from a certain positive"
                " number and increase sequentially. This ID becomes especially handy if you're"
                " using [Webhooks](https://core.telegram.org/bots/api/#setwebhook), since it"
                " allows you to ignore repeated updates or to restore the correct update sequence,"
                " should they get out of order. If there are no new updates for at least a week,"
                " then identifier of the next update will be chosen randomly instead of"
                " sequentially."
            )
        ),
    ]
    message: Optional[Message] = None
    edited_message: Optional[Message] = None
    channel_post: Optional[Message] = None
    edited_channel_post: Optional[Message] = None
    inline_query: Optional[InlineQuery] = None
    chosen_inline_result: Optional[ChosenInlineResult] = None
    callback_query: Optional[CallbackQuery] = None
    shipping_query: Optional[ShippingQuery] = None
    pre_checkout_query: Optional[PreCheckoutQuery] = None
    poll: Optional[Poll] = None
    poll_answer: Optional[PollAnswer] = None
    my_chat_member: Optional[ChatMemberUpdated] = None
    chat_member: Optional[ChatMemberUpdated] = None
    chat_join_request: Optional[ChatJoinRequest] = None


class Chat(BaseModel):
    """
    This object represents a chat.
    """

    class Config:
        allow_mutation = False

    id: Annotated[
        StrictInt,
        Field(
            description=(
                "Unique identifier for this chat. This number may have more than 32 significant"
                " bits and some programming languages may have difficulty/silent defects in"
                " interpreting it. But it has at most 52 significant bits, so a signed 64-bit"
                " integer or double-precision float type are safe for storing this identifier."
            )
        ),
    ]
    type: Annotated[
        Type,
        Field(
            description="Type of chat, can be either “private”, “group”, “supergroup” or “channel”"
        ),
    ]
    title: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. Title, for supergroups, channels and group chats"),
    ] = None
    username: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Username, for private chats, supergroups and channels if available"
            )
        ),
    ] = None
    first_name: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. First name of the other party in a private chat"),
    ] = None
    last_name: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. Last name of the other party in a private chat"),
    ] = None
    photo: Optional[ChatPhoto] = None
    bio: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Bio of the other party in a private chat. Returned only in"
                " [getChat](https://core.telegram.org/bots/api/#getchat)."
            )
        ),
    ] = None
    has_private_forwards: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. True, if privacy settings of the other party in the private chat"
                " allows to use `tg://user?id=<user_id>` links only in chats with the user."
                " Returned only in [getChat](https://core.telegram.org/bots/api/#getchat)."
            )
        ),
    ] = None
    description: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Description, for groups, supergroups and channel chats. Returned only"
                " in [getChat](https://core.telegram.org/bots/api/#getchat)."
            )
        ),
    ] = None
    invite_link: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Primary invite link, for groups, supergroups and channel chats."
                " Returned only in [getChat](https://core.telegram.org/bots/api/#getchat)."
            )
        ),
    ] = None
    pinned_message: Optional[Message] = None
    permissions: Optional[ChatPermissions] = None
    slow_mode_delay: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. For supergroups, the minimum allowed delay between consecutive"
                " messages sent by each unpriviledged user; in seconds. Returned only in"
                " [getChat](https://core.telegram.org/bots/api/#getchat)."
            )
        ),
    ] = None
    message_auto_delete_time: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. The time after which all messages sent to the chat will be"
                " automatically deleted; in seconds. Returned only in"
                " [getChat](https://core.telegram.org/bots/api/#getchat)."
            )
        ),
    ] = None
    has_protected_content: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. True, if messages from the chat can't be forwarded to other chats."
                " Returned only in [getChat](https://core.telegram.org/bots/api/#getchat)."
            )
        ),
    ] = None
    sticker_set_name: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. For supergroups, name of group sticker set. Returned only in"
                " [getChat](https://core.telegram.org/bots/api/#getchat)."
            )
        ),
    ] = None
    can_set_sticker_set: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. *True*, if the bot can change the group sticker set. Returned only in"
                " [getChat](https://core.telegram.org/bots/api/#getchat)."
            )
        ),
    ] = None
    linked_chat_id: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. Unique identifier for the linked chat, i.e. the discussion group"
                " identifier for a channel and vice versa; for supergroups and channel chats. This"
                " identifier may be greater than 32 bits and some programming languages may have"
                " difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so"
                " a signed 64 bit integer or double-precision float type are safe for storing this"
                " identifier. Returned only in"
                " [getChat](https://core.telegram.org/bots/api/#getchat)."
            )
        ),
    ] = None
    location: Optional[ChatLocation] = None


class Message(BaseModel):
    """
    This object represents a message.
    """

    class Config:
        allow_mutation = False

    message_id: Annotated[
        StrictInt, Field(description="Unique message identifier inside this chat")
    ]
    from_: Annotated[Optional[User], Field(alias="from")] = None
    sender_chat: Optional[Chat] = None
    date: Annotated[StrictInt, Field(description="Date the message was sent in Unix time")]
    chat: Chat
    forward_from: Optional[User] = None
    forward_from_chat: Optional[Chat] = None
    forward_from_message_id: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. For messages forwarded from channels, identifier of the original"
                " message in the channel"
            )
        ),
    ] = None
    forward_signature: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. For forwarded messages that were originally sent in channels or by an"
                " anonymous chat administrator, signature of the message sender if present"
            )
        ),
    ] = None
    forward_sender_name: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Sender's name for messages forwarded from users who disallow adding a"
                " link to their account in forwarded messages"
            )
        ),
    ] = None
    forward_date: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. For forwarded messages, date the original message was sent in Unix"
                " time"
            )
        ),
    ] = None
    is_automatic_forward: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. True, if the message is a channel post that was automatically"
                " forwarded to the connected discussion group"
            )
        ),
    ] = None
    reply_to_message: Optional[Message] = None
    via_bot: Optional[User] = None
    edit_date: Annotated[
        Optional[StrictInt],
        Field(description="*Optional*. Date the message was last edited in Unix time"),
    ] = None
    has_protected_content: Annotated[
        Optional[StrictBool],
        Field(description="*Optional*. True, if the message can't be forwarded"),
    ] = None
    media_group_id: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. The unique identifier of a media message group this message"
                " belongs to"
            )
        ),
    ] = None
    author_signature: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Signature of the post author for messages in channels, or the custom"
                " title of an anonymous group administrator"
            )
        ),
    ] = None
    text: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. For text messages, the actual UTF-8 text of the message, 0-4096"
                " characters"
            )
        ),
    ] = None
    entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. For text messages, special entities like usernames, URLs, bot"
                " commands, etc. that appear in the text"
            )
        ),
    ] = None
    animation: Optional[Animation] = None
    audio: Optional[Audio] = None
    document: Optional[Document] = None
    photo: Annotated[
        Optional[Sequence[PhotoSize]],
        Field(description="*Optional*. Message is a photo, available sizes of the photo"),
    ] = None
    sticker: Optional[Sticker] = None
    video: Optional[Video] = None
    video_note: Optional[VideoNote] = None
    voice: Optional[Voice] = None
    caption: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Caption for the animation, audio, document, photo, video or voice,"
                " 0-1024 characters"
            )
        ),
    ] = None
    caption_entities: Annotated[
        Optional[Sequence[MessageEntity]],
        Field(
            description=(
                "*Optional*. For messages with a caption, special entities like usernames, URLs,"
                " bot commands, etc. that appear in the caption"
            )
        ),
    ] = None
    contact: Optional[Contact] = None
    dice: Optional[Dice] = None
    game: Optional[Game] = None
    poll: Optional[Poll] = None
    venue: Optional[Venue] = None
    location: Optional[Location] = None
    new_chat_members: Annotated[
        Optional[Sequence[User]],
        Field(
            description=(
                "*Optional*. New members that were added to the group or supergroup and"
                " information about them (the bot itself may be one of these members)"
            )
        ),
    ] = None
    left_chat_member: Optional[User] = None
    new_chat_title: Annotated[
        Optional[StrictStr],
        Field(description="*Optional*. A chat title was changed to this value"),
    ] = None
    new_chat_photo: Annotated[
        Optional[Sequence[PhotoSize]],
        Field(description="*Optional*. A chat photo was change to this value"),
    ] = None
    delete_chat_photo: Annotated[
        Optional[StrictBool],
        Field(description="*Optional*. Service message: the chat photo was deleted"),
    ] = None
    group_chat_created: Annotated[
        Optional[StrictBool],
        Field(description="*Optional*. Service message: the group has been created"),
    ] = None
    supergroup_chat_created: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. Service message: the supergroup has been created. This field can't be"
                " received in a message coming through updates, because bot can't be a member of a"
                " supergroup when it is created. It can only be found in reply_to_message if"
                " someone replies to a very first message in a directly created supergroup."
            )
        ),
    ] = None
    channel_chat_created: Annotated[
        Optional[StrictBool],
        Field(
            description=(
                "*Optional*. Service message: the channel has been created. This field can't be"
                " received in a message coming through updates, because bot can't be a member of a"
                " channel when it is created. It can only be found in reply_to_message if"
                " someone replies to a very first message in a channel."
            )
        ),
    ] = None
    message_auto_delete_timer_changed: Optional[MessageAutoDeleteTimerChanged] = None
    migrate_to_chat_id: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. The group has been migrated to a supergroup with the specified"
                " identifier. This number may have more than 32 significant bits and some"
                " programming languages may have difficulty/silent defects in interpreting it. But"
                " it has at most 52 significant bits, so a signed 64-bit integer or"
                " double-precision float type are safe for storing this identifier."
            )
        ),
    ] = None
    migrate_from_chat_id: Annotated[
        Optional[StrictInt],
        Field(
            description=(
                "*Optional*. The supergroup has been migrated from a group with the specified"
                " identifier. This number may have more than 32 significant bits and some"
                " programming languages may have difficulty/silent defects in interpreting it. But"
                " it has at most 52 significant bits, so a signed 64-bit integer or"
                " double-precision float type are safe for storing this identifier."
            )
        ),
    ] = None
    pinned_message: Optional[Message] = None
    invoice: Optional[Invoice] = None
    successful_payment: Optional[SuccessfulPayment] = None
    connected_website: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. The domain name of the website on which the user has logged in. [More"
                " about Telegram Login »](/widgets/login)"
            )
        ),
    ] = None
    passport_data: Optional[PassportData] = None
    proximity_alert_triggered: Optional[ProximityAlertTriggered] = None
    voice_chat_scheduled: Optional[VoiceChatScheduled] = None
    voice_chat_started: Optional[VoiceChatStarted] = None
    voice_chat_ended: Optional[VoiceChatEnded] = None
    voice_chat_participants_invited: Optional[VoiceChatParticipantsInvited] = None
    reply_markup: Optional[InlineKeyboardMarkup] = None


class CallbackQuery(BaseModel):
    """
    This object represents an incoming callback query from a callback button in an [inline keyboard](/bots#inline-keyboards-and-on-the-fly-updating). If the button that originated the query was attached to a message sent by the bot, the field *message* will be present. If the button was attached to a message sent via the bot (in [inline mode](https://core.telegram.org/bots/api/#inline-mode)), the field *inline_message_id* will be present. Exactly one of the fields *data* or *game_short_name* will be present.
    """

    class Config:
        allow_mutation = False

    id: Annotated[StrictStr, Field(description="Unique identifier for this query")]
    from_: Annotated[User, Field(alias="from")]
    message: Optional[Message] = None
    inline_message_id: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Identifier of the message sent via the bot in inline mode, that"
                " originated the query."
            )
        ),
    ] = None
    chat_instance: Annotated[
        StrictStr,
        Field(
            description=(
                "Global identifier, uniquely corresponding to the chat to which the message with"
                " the callback button was sent. Useful for high scores in"
                " [games](https://core.telegram.org/bots/api/#games)."
            )
        ),
    ]
    data: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Data associated with the callback button. Be aware that a bad client"
                " can send arbitrary data in this field."
            )
        ),
    ] = None
    game_short_name: Annotated[
        Optional[StrictStr],
        Field(
            description=(
                "*Optional*. Short name of a [Game](https://core.telegram.org/bots/api/#games) to"
                " be returned, serves as the unique identifier for the game"
            )
        ),
    ] = None


class ChatMemberUpdated(BaseModel):
    """
    This object represents changes in the status of a chat member.
    """

    class Config:
        allow_mutation = False

    chat: Chat
    from_: Annotated[User, Field(alias="from")]
    date: Annotated[StrictInt, Field(description="Date the change was done in Unix time")]
    old_chat_member: ChatMember
    new_chat_member: ChatMember
    invite_link: Optional[ChatInviteLink] = None


class ChatJoinRequest(BaseModel):
    """
    Represents a join request sent to a chat.
    """

    class Config:
        allow_mutation = False

    chat: Chat
    from_: Annotated[User, Field(alias="from")]
    date: Annotated[StrictInt, Field(description="Date the request was sent in Unix time")]
    bio: Annotated[Optional[StrictStr], Field(description="*Optional*. Bio of the user.")] = None
    invite_link: Optional[ChatInviteLink] = None


Update.update_forward_refs()
Chat.update_forward_refs()

RequestTypes = Union[
    GetUpdates,
    SetWebhook,
    DeleteWebhook,
    ForwardMessage,
    SendChatAction,
    GetUserProfilePhotos,
    GetFile,
    BanChatMember,
    UnbanChatMember,
    RestrictChatMember,
    PromoteChatMember,
    SetChatAdministratorCustomTitle,
    BanChatSenderChat,
    UnbanChatSenderChat,
    BanChatSenderChat,
    SetChatPermissions,
    ExportChatInviteLink,
    CreateChatInviteLink,
    EditChatInviteLink,
    RevokeChatInviteLink,
    ApproveChatJoinRequest,
    DeclineChatJoinRequest,
    ApproveChatJoinRequest,
    SetChatPhoto,
    DeleteChatPhoto,
    ExportChatInviteLink,
    SetChatTitle,
    SetChatDescription,
    PinChatMessage,
    UnpinChatMessage,
    UnpinAllChatMessages,
    ExportChatInviteLink,
    LeaveChat,
    GetChat,
    LeaveChat,
    GetChatAdministrators,
    LeaveChat,
    GetChatMemberCount,
    LeaveChat,
    GetChatMember,
    SetChatStickerSet,
    DeleteChatStickerSet,
    AnswerCallbackQuery,
    DeleteMessage,
    GetStickerSet,
    UploadStickerFile,
    CreateNewStickerSet,
    AddStickerToSet,
    SetStickerPositionInSet,
    DeleteStickerFromSet,
    SetStickerSetThumb,
    AnswerShippingQuery,
    AnswerPreCheckoutQuery,
    SetGameScore,
    GetGameHighScores,
    SendMediaGroup,
    SetMyCommands,
    DeleteMyCommands,
    GetMyCommands,
    SetPassportDataErrors,
    SendMessage,
    CopyMessage,
    SendPhoto,
    SendAudio,
    SendDocument,
    SendVideo,
    SendAnimation,
    SendVoice,
    SendVideoNote,
    SendLocation,
    EditMessageLiveLocation,
    StopMessageLiveLocation,
    SendVenue,
    SendContact,
    SendPoll,
    SendDice,
    EditMessageText,
    EditMessageCaption,
    EditMessageMedia,
    EditMessageReplyMarkup,
    StopPoll,
    SendSticker,
    SendInvoice,
    SendGame,
    AnswerInlineQuery,
]
